This document describes the GAM command line syntax in modified BNF, see https://en.wikipedia.org/wiki/Backus-Naur_Form
Skip the History section and start reading at Introduction.

Items on the command line are space separated, when an actual space character is required, it will be indicated by <Space>.
If an item contains spaces, it should be surrounded by ".

[] optional item
() group items
* item may appear zero or more times
+ item may appear one or more times
| separates alternative items

## Primitives

<Character> ::= a single character
<Digit> ::= 0|1|2|3|4|5|6|7|8|9
<Number> ::= <Digit>+
<Hex> ::= <Digit>|a|b|c|d|e|f|A|B|C|D|E|F
<Space> ::= an actual space character
<String> ::= a string of characters, surrounded by " if it contains spaces
<FalseValues>= false|off|no|disabled|0
<TrueValues> ::= true|on|yes|enabled|1

<Charset> ::= ascii|latin1|mbcs|utf-8|utf-8-sig|utf-16|<String>
<FileFormat> ::= csv|html|txt|tsv|jpeg|jpg|png|svg|pdf|rtf|pptx|xlsx|docx|odt|ods|openoffice|ms|microsoft|micro$oft
<Language> ::=
	ach|af|ag|ak|am|ar|az|be|bem|bg|bn|br|bs|ca|chr|ckb|co|crs|cs|cy|da|de|ee|el|en|en-gb|en-us|eo|es|es-419|et|eu|
	fa|fi|fo|fr|fr-ca|fy|ga|gaa|gd|gl|gn|gu|ha|haw|he|hi|hr|ht|hu|hy|ia|id|ig|in|is|it|iw|ja|jw|
	ka|kg|kk|km|kn|ko|kri|ku|ky|la|lg|ln|lo|loz|lt|lua|lv|mfe|mg|mi|mk|ml|mn|mo|mr|ms|mt|my|
	ne|nl|nn|no|nso|ny|nyn|oc|om|or|pa|pcm|pl|ps|pt-br|pt-pt|qu|rm|rn|ro|ru|rw|
	sd|sh||si|sk|sl|sn|so|sq|sr|sr-me|st|su|sv|sw|ta|te|tg|th|ti|tk|tl|tn|to|tr|tt|tum|tw|
	ug|uk|ur|uz|vi|wo|xh|yi|yo|zh-cn|zh-hk|zh-tw|zu
<MimeType> ::=
	gdoc|gdocument|
	gdrawing|
	gfolder|gdirectory|
	gform|
	gfusion|
	gmap|
	gpresentation|
	gscript|
	gsite|
	gsheet|gspreadsheet|
	<String>
<MimeTypeList> ::= "<MimeType>(,<MimeType>)*"
<ProductID> ::=
	Google-Apps|
	Google-Chrome-Device-Management|
	Google-Coordinate|
	Google-Drive-storage|
	Google-Vault
<SKUID> ::=
	free|standard|Google-Apps|
	gafb|gafw|basic|gsuitebasic|Google-Apps-For-Business|
	gafg|gsuitegovernment|gsuitegov|Google-Apps-For-Government|
	gams|postini|gsuitegams|gsuitepostini|gsuitemessagesecurity|Google-Apps-For-Postini|
	gal|lite|gsuitelite|Google-Apps-Lite|
	gau|unlimited|gsuitebusiness|Google-Apps-Unlimited|
	gae|enterprise|gsuiteenterprise|1010020020|
	chrome|cdm|googlechromedevicemanagement|Google-Chrome-Device-Management|
	coordinate|googlecoordinate|Google-Coordinate|
	drive20gb|20gb|googledrivestorage20gb|Google-Drive-storage-20GB|
	drive50gb|50gb|googledrivestorage50gb|Google-Drive-storage-50GB|
	drive200gb|200gb|googledrivestorage200gb|Google-Drive-storage-200GB|
	drive400gb|400gb|googledrivestorage400gb|Google-Drive-storage-400GB|
	drive1tb|1tb|googledrivestorage1tb|Google-Drive-storage-1TB|
	drive2tb|2tb|googledrivestorage2tb|Google-Drive-storage-2TB|
	drive4tb|4tb|googledrivestorage4tb|Google-Drive-storage-4TB|
	drive8tb|8tb|googledrivestorage8tb|Google-Drive-storage-8TB|
	drive16tb|16tb|googledrivestorage16tb|Google-Drive-storage-16TB|
	vault|googlevault|Google-Vault|
	vfe|googlevaultformeremployee|Google-Vault-Former-Employee
<SMTPDateHeader> ::=
	date|
	delivery-date|
	expires|
	expiry-date|
	latest-delivery-time|
	reply-by|
	resent-date
<SMTPHeader> ::=
	accept-language|
	alternate-recipient|
	autoforwarded|
	autosubmitted|
	bcc|
	cc|
	comments|
	content-alternative|
	content-base|
	content-description|
	content-disposition|
	content-duration|
	content-id|
	content-identifier|
	content-language|
	content-location|
	content-md5|
	content-return|
	content-transfer-encoding|
	content-type|
	content-features|
	conversion|
	conversion-with-loss|
	dl-expansion-history|
	deferred-delivery|
	delivered-to|
	discarded-x400-ipms-extensions|
	discarded-x400-mts-extensions|
	disclose-recipients|
	disposition-notification-options|
	disposition-notification-to|
	encoding|
	encrypted|
	from|
	generate-delivery-report|
	importance|
	in-reply-to|
	incomplete-copy|
	keywords|
	language|
	list-archive|
	list-help|
	list-id|
	list-owner|
	list-post|
	list-subscribe|
	list-unsubscribe|
	mime-version|
	message-context|
	message-id|
	message-type|
	obsoletes|
	original-encoded-information-types|
	original-message-id|
	originator-return-address|
	pics-label|
	prevent-nondelivery-report|
	priority|
	received|
	references|
	reply-to|
	resent-bcc|
	resent-cc|
	resent-from|
	resent-message-id|
	resent-reply-to|
	resent-sender|
	resent-to|
	return-path|
	sender|
	sensitivity|
	subject|
	supersedes|
	to|
	x400-content-identifier|
	x400-content-return|
	x400-content-type|
	x400-mts-identifier|
	x400-originator|
	x400-received|
	x400-recipients|
	x400-trace
<SMTPHeaderList> ::= "<SMTPDateHeader|SMTPHeader>(,<SMTPDateHeader|SMTPHeader>)*"

## Basic items built from primitives

<Boolean> ::= <TrueValues>|<FalseValues>
<ByteCount> ::= <Number>[m|k|b]
<CIDRnetmask> ::= <Number>.<Number>.<Number>.<Number>/<Number>
<ColorHex> ::= #<Hex><Hex><Hex><Hex><Hex><Hex>
<Year> ::= <Digit><Digit><Digit><Digit>
<Month> ::= <Digit><Digit>
<Day> ::= <Digit><Digit>
<Hour> ::= <Digit><Digit>
<Minute> ::= <Digit><Digit>
<Second> ::= <Digit><Digit>
<MilliSeconds> ::= <Digit><Digit><Digit>
<Date> ::=
	<Year>-<Month>-<Day> |
	(+|-)<Number>(d|w)
<DateTime> ::=
	<Year>-<Month>-<Day>(<Space>|T)<Hour>:<Minute> |
	(+|-)<Number>(m|h|d|w)
<Time> ::=
	<Year>-<Month>-<Day>(<Space>|T)<Hour>:<Minute>:<Second>[.<MilliSeconds>](Z|(+|-(<Hour>:<Minute>))) |
	(+|-)<Number>(m|h|d|w)
<RegularExpression> ::= <Python Regular Expression, see: https://docs.python.org/2/library/re.html>
<SiteName> ::= [a-z,0-9,-]+
<UniqueID> ::= uid:<String>

## Named items

<AccessToken> ::= <String>
<AspID> ::= <String>
<CalendarACLScope> ::= [user:]<EmailAddress>|group:<EmailAddress>|domain[:<DomainName>]|default
<CalendarColorIndex> ::== <Number in range 1-24>
<CalendarItem> ::= <EmailAddress>|<String>
<ClientID> ::= <String>
<ContactID> ::= <String>
<ContactGroupID> ::= id:<String>
<ContactGroupName> ::= <String>
<ContactGroupItem> ::= <ContactGroupID>|<ContactGroupName>
<CorporaAttribute> ::= allteamdrives|domain|user
<CourseAlias> ::= <String>
<CourseID> ::= <Number>|d:<CourseAlias>
<CourseParticipantType> ::= teacher|teachers|student|students
<CourseState> ::= active|archived|provisioned|declined
<CrOSID> ::= <String>
<CrOSItem> ::= <CrOSID>|(query:<QueryCrOS>)|(query:orgunitpath:<OrgUnitPath>)|(query <QueryCrOS>)
<CustomerID> ::= <String>
<DomainName> ::= <String>(.<String>)+
<DriveFileACLRole> :: =commenter|editor|organizer|owner|reader|writer
<DriveFileID> ::= <String>
<DriveFileURL> :: = https://docs.google.com/a/<DomainName>/document/d/<DriveFileID>/<String>
<DriveFileItem> ::= <DriveFileID>|<DriveFileURL>
<DriveFileName> ::= <String>
<DriveFolderID> ::= <String>
<DriveFolderName> ::= <String>
<DriveFilePermission> ::= anyone|anyonewithlink|user:<EmailAddress>|group:<EmailAddress>|domain:<DomainName>|domainwithlink:<DomainName>;<DriveFileACLRole>
<DriveFilePermissionID> ::= anyone|anyonewithlink|id:<String>
<DriveFilePermissionIDorEmail> ::= <DriveFilePermissionID>|<EmailAddress>
<DriveFileRevisionID> ::= <String>
<EmailAddress> ::= <String>@<DomainName>
<EmailItem> ::= <EmailAddress>|<UniqueID>|<String>
<EventColorIndex> ::== <Number in range 1-11>
<EventID> ::= <String>
<FieldName> ::= <String>
<FileName> ::= <String>
<FileNamePattern> ::= <String>
<FilterID> ::= <String>
<GroupItem> ::= <EmailAddress>|<UniqueID>|<String>
<GuardianItem> ::= <EmailAddress>|<UniqueID>|<String>
<GuardianInvitationID> ::= <String>
<HoldItem> ::= <UniqueID>|<String>
<HostName> ::= <String>
<iCalUID> ::= <String>
<Key> ::= <String>
<LabelID> ::= <String>
<LabelName> ::= <String>
<Marker> ::= <String>
<MatterItem> ::= <UniqueID>|<String>
<MaximumNumberOfSeats> ::= <Number>
<MessageID> ::= <String>
<MobileID> ::= <String>
<MobileItem> ::= <MobileID>|(query:<QueryMobile>)|(query <QueryMobile>)
<NotificationID> ::= <String>
<NumberOfSeats> ::= <Number>
<OrgUnitID> ::= id:<String>
<OrgUnitPath> ::= /|(/<String)+
<OrgUnitItem> ::= <OrgUnitID>|<OrgUnitPath>
<ParameterKey> ::= <String>
<ParameterValue> ::= <String>
<Password> ::= <String>
<PrinterACLScope> ::= <UserTypeEntity>|user:<EmailAdress>|group:<EmailAddress>|domain:<DomainName>)|domain|public
<PrinterID> ::= <String>
<PrintJobAge> ::= <Number>(m|h|d|w)
<PrintJobID> ::= <String>
<PrintJobStatus> ::= done|error|held|in_progress|queued|submitted
<PropertyKey> ::= <String>
<PropertyValue> ::= <String>
<QueryCalendar> ::= <String>
<QueryContact> ::= <String> See: https://developers.google.com/google-apps/contacts/v3/reference#contacts-query-parameters-reference
<QueryCrOS> ::= <String> See: https://support.google.com/chrome/a/answer/1698333?hl=en
<QueryDriveFile> :: = <String> See: https://developers.google.com/drive/v3/web/search-parameters
<QueryGmail> ::= <String> See: https://support.google.com/mail/answer/7190
<QueryMobile> ::= <String> See: https://support.google.com/a/answer/1408863?hl=en#search
<QueryPrinter> ::= <String> See: https://developers.google.com/cloud-print/docs/appInterfaces#search
<QueryPrintJob> ::= <String> See: https://developers.google.com/cloud-print/docs/appInterfaces#parameters_3
<QueryUser> :: = <String> See: https://developers.google.com/admin-sdk/directory/v1/guides/search-users
<QueryVaultCorpus> ::= <String> See: https://developers.google.com/vault/reference/rest/v1/matters.holds#CorpusQuery
<RequestID> ::= <String>
<ResourceID> ::= <String>
<SchemaName> ::= <String>
<Section> ::= <String>
<SiteACLScope> ::= <EmailAddress>|user:<EmailAdress>|group:<EmailAddress>|domain:<DomainName>|domain|default
<SiteItem> ::= [<DomainName>/]<SiteName>
<S/MIMEID> ::= <String>	
<StudentItem> ::= <EmailAddress>|<UniqueID>|<String>
<Tag> ::= <String>
<TeamDriveID> ::= <String>
<TeamDriveName> ::= <String>
<ThreadID> ::= <String>
<TimeZone> ::= <String>
<Title> ::= <String>
<ToDriveAttributes> ::=
	(tduser <EmailAddress>)|
	(tdtitle <String>)|
	(tdparent id:<DriveFolderID>|<DriveFolderName>)|(tdfileid <DriveFileID>)
	(tdtimestamp [<Boolean>] [tddaysoffset <Number>] [tdhoursoffset <Number])|
	(tdlocalcopy [<Boolean>])|
	(tdnobrowser [<Boolean>])
<TransferID> ::= <String>
<URI> ::= <String>
<URL> ::= <String>
<UserItem> ::= <EmailAddress>|<UniqueID>|<String>

## Lists of items

Lists can be in the following formats:
Items, separated by commas, without spaces or commas in the items themselves: item(,item)*
Items, separated by spaces, without spaces or commas in the items themselves: "item( item)*"
Items, separated by commas, with spaces or commas in the items themselves: "'it em'(,'it,em')*"
Items, separated by spaces, with spaces or commas in the items themselves: "'it em'( 'it,em')*"

<CalendarACLScopeList> ::== "<CalendarACLScope>(,<CalendarACLScope>)*"
<CalendarList> ::= "<CalendarItem>(,<CalendarItem>)*"
<CourseAliasList> ::= "<CourseAlias>(,<CourseAlias>)*"
<CourseIDList> ::= "<CourseID>(,<CourseID>)*"
<CourseStateList> ::= "<CourseState>(,<CourseState>)*"
<ContactGroupList> ::= "<ContactGroupItem>(,<ContactGroupItem>)*"
<ContactIDList> ::= "<ContactID>(,<ContactID>)*"
<CrOSList> ::= "<CrOSID>(,<CrOSID>)*"
<DomainNameList> ::== "<DomainName>(,<DomainName>)*"
<DriveFolderIDList> ::= "<DriveFolderID>(,<DriveFolderID>)*"
<DriveFileList> ::= "<DriveFileItem>(,<DriveFileItem>)*"
<DriveFilePermissionList> ::= "<DriveFilePermission>(,<DriveFilePermission)*"
<DriveFilePermissionIDList> ::= "<DriveFilePermissionID>(,<DriveFilePermissionID>)*"
<DriveFileRevisionIDList> ::= "<DriveFileRevisionID>(,<DriveFileRevisionID>)*"
<EmailAddressList> ::= "<EmailAddress>(,<EmailAddress>)*"
<EmailItemList> ::= "<EmailItem>(,<EmailItem>)*"
<EventIDList> ::= "<EventID>(,<EventID>)*"
<FieldNameList> ::= "<FieldName>(,<FieldName>)*"
<FileFormatList> ::= "<FileFormat>(,<FileFormat)*"
<FilterIDList> ::= "<FilterID>(,<FilterID>)*"
<GroupList> ::= "<GroupItem>(,<GroupItem>)*"
<LabelNameList> ::= "<LabelName>(,<LabelName)*"
<LanguageList> ::= "<Language>(,<Language)*"
<MessageIDList> ::= "<MessageID>(,<MessageID>)*"
<MatterItemList> ::= "<MatterItem>(,<MatterItem>)*"
<MobileList> ::= "<MobileID>(,<MobileID>)*"
<OrgUnitList> ::== "<OrgUnitItem>(,<OrgUnitItem>)*"
<PrinterACLScopeList> ::== "<PrinterACLScope>(,<PrinterACLScope>)*"
<PrinterIDList> ::= "<PrinterID>(,<PrinterID>)*"
<PrintJobIDList> ::= "<PrintJobID>(,<PrintJobID>)*"
<ProductIDList> ::= "(<ProductID>|SKUID>)(,<ProductID>|SKUID>)*"
<ResourceIDList> ::= "<ResourceID>(,<ResourceID>)*"
<SchemaNameList> ::= "<SchemaName>(,<SchemaName>)*"
<SiteACLScopeList> ::== "<SiteACLScope>(,<SiteACLScope>)*"
<SiteList> ::= "<SiteItem>(,<SiteItem>)*"
<SKUIDList> ="<SKUID>(,<SKUID>)*"
<ThreadIDList> ::= "<ThreadID>(,<ThreadID>)*"
<UserList> ::= "<UserItem>(,<UserItem>)*"

## Collections of ChromeOs Devices

Specify a collection of ChromeOS devices by directly specifying them or by specifiying items that will yield a list of ChromeOS devices.

<CrOSTypeEntity> ::=
	(all cros)|
	(cros <CrOSList>)|
	(cros_ou|cros_org <OrgUnitItem>)|
	(cros_ou_and_children|cros_org_and_children <OrgUnitItem>)|
	(cros_ous|cros_orgs <OrgUnitList>)|
	(cros_ous_and_children|cros_orgs_and_children <OrgUnitList>)|
	(crosfile <FileName> [charset <Charset>] [delimiter <Character>])|
	(croscsvfile <FileName>(:<FieldName>)+ [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>] (matchfield <FieldName> <RegularExpression>)* [delimiter <Character>])|
	(crosquery <QueryCrOS>)|
	(datafile cros|cros_ous|cros_ous_and_children <FileName> [charset <Charset>] [delimiter <Character>])|
	(csvkmd cros|cros_ous|cros_ous_and_children <FileName> [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>]
		keyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
		subkeyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
		(matchfield <FieldName> <RegularExpression>)*
		[datafield <FieldName>(:<FieldName)* [delimiter <Character>]])|
	(croscsvdata <FieldName>(:<FieldName>*))

## Collections of Users

Specify a collection of Users by directly specifying them or by specifiying items that will yield a list of users.

<UserTypeEntity> ::=
	(all users)|
	(user <UserItem>)|
	(users <UserList>)|
	(group <GroupItem>)|
	(groups <GroupList>)|
	(group_users <GroupList> [members] [managers] [owners] [primarydomain] [domains <DomainNameList>] [recursive] end)|
	(ou|org <OrgUnitItem>)|
	(ou_and_children|ou_and_child <OrgUnitItem>)|
	(ous|orgs <OrgUnitList>)|
	(ous_and_children|ous_and_child <OrgUnitList>)|
	(courseparticipants <CourseIDList>)|
	(students <CourseIDList>)|
	(teachers <CourseIDList>)|
	(license|licenses|licence|licences <SKUIDList>)|
	(file <FileName> [charset <Charset>] [delimiter <Character>])|
	(csvfile <FileName>(:<FieldName>)+ [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>] (matchfield <FieldName> <RegularExpression>)* [delimiter <Character>])|
	(query <QueryUser>)|
	(datafile users|groups|ous|ous_and_children|courseparticipants|students|teachers <FileName> [charset <Charset>] [delimiter <Character>])|
	(csvkmd users|groups|ous|ous_and_children|courseparticipants|students|teachers <FileName> [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>]
		keyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
		subkeyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
		(matchfield <FieldName> <RegularExpression>)*
		[datafield <FieldName>(:<FieldName)* [delimiter <Character>]])|
	(csvdata <FieldName>(:<FieldName>*))

## Collections of Items

Specify a collection of items by directly specifying them; the item type is determined by context.

<CSVkmdSelector> ::=
	csvkmd <FileName> [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>]
	       keyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
	       subkeyfield <FieldName> [keypattern <RegularExpression>] [keyvalue <String>] [delimiter <Character>]
	       (matchfield <FieldName> <RegularExpression>)*
	       [datafield <FieldName>(:<FieldName)* [delimiter <Character>]]
<CSVSubkeySelector> ::= csvsubkey <FieldName>
<CSVDataSelector> ::= csvdata <FieldName>
<FileSelector> ::=
	(file <FileName> [charset <Charset>] [delimiter <Character>])|
	(csvfile <FileName>(:<FieldName>)+ [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>] (matchfield <FieldName> <RegularExpression>)* [delimiter <Character>])

<CalendarACLScopeEntity>::= <CalendarACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<CalendarEntity> ::= <CalendarList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<ContactEntity> ::= <ContactIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<ContactGroupEntity> ::= <ContactGroupList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<CourseAliasEntity> ::= <CourseAliasList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<CourseEntity> ::= <CourseIDList> | <FileSelector> | <CSVkmdSelector>
<CrOSEntity> ::= <CrOSItem> | <CrOSList> | <FileSelector> | <CSVkmdSelector>
<DomainNameEntity> ::= <DomainNameList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<DriveFileIDEntity> ::= (<DriveFileItem>) | (id <DriveFileItem>) | (id:<DriveFileItem>) | (ids <DriveFileList>) | (ids:<DriveFileList>)
<DriveFileNameEntity> ::= (drivefilename <DriveFileName>) | (drivefilename:<DriveFileName>) | (anydrivefilename <DriveFileName>) | (anydrivefilename:<DriveFileName>)
<DriveFileQueryEntity> ::= (query <QueryDriveFile>) | (query:<QueryDriveFile>)
<DriveFileQueryShortcut> ::=
	all_files | all_folders | all_google_files | all_non_google_files | all_items |
	my_files | my_folders | my_google_files | my_non_google_files | my_items |
	others_files | others_folders | others_google_files | others_non_google_files | others_items |
	writable_files
<TeamDriveIDEntity> ::= (teamdriveid <DriveFileItem>) | (teamdriveid:<DriveFileItem>)
<TeamDriveNameEntity> ::= (teamdrive <TeamDriveName>) | (teamdrive:<TeamDriveName>)
<TeamDriveFileNameEntity> ::= (teamdrivefilename <DriveFileName>) | (teamdrivefilename:<DriveFileName>)
<TeamDriveFileQueryEntity> ::= (teamdrivequery <QueryDriveFile>) | (teamdrivequery:<QueryDriveFile>)
<TeamDriveFileQueryShortcut> ::=
	all_files | all_folders | all_google_files | all_non_google_files | all_items
<DriveFileEntity> ::=
	<DriveFileIDEntity> |
	<DriveFileNameEntity> |
	<DriveFileQueryEntity> |
	<DriveFileQueryShortcut> |
	root |
	<TeamDriveIDEntity> [<TeamDriveFileQueryShortcut>] |
	<TeamDriveNameEntity> [<TeamDriveFileQueryShortcut>] |
	<TeamDriveFileNameEntity> |
	<TeamDriveFileQueryEntity> |
	<FileSelector> | <CSVkmdSelector> | <CSVSubkeySelector>) | <CSVDataSelector>)
<DriveFileEntityListTree> ::=
	<DriveFileIDEntity> |
	<DriveFileNameEntity> |
	<DriveFileQueryEntity> |
	orphans |
	root |
	<TeamDriveIDEntity> |
	<TeamDriveNameEntity> |
	<TeamDriveFileNameEntity> |
	<TeamDriveFileQueryEntity> |
	<FileSelector> | <CSVkmdSelector> | <CSVSubkeySelector>) | <CSVDataSelector>)
<DriveFilePermissionEntity> ::= <DriveFilePermissionList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<DriveFilePermissionIDEntity> ::= <DriveFilePermissionIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<DriveFileRevisionIDEntity> ::=
	(<DriveFileRevisionID>) | (id <DriveFileRevisionID>) | (id:<DriveFileRevisionID>) | (ids <DriveFileRevisionIDList>) | (ids:<DriveFileRevisionIDList>) |
	(first|last|allexceptfirst|allexceptlast <Number>) |
	(before|after <DateTime>) | (range <DateTime> <DateTime>) |
	<FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<EmailAddressEntity> ::= <EmailAddressList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<EventIDEntity> ::= <EventIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<FilterIDEntity> ::= <FilterIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<GroupEntity> ::= <GroupList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<MessageIDEntity> ::= <MessageIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<MobileEntity> ::= <MobileItem> | <MobileList> | <FileSelector> | <CSVkmdSelector>
<OrgUnitEntity> ::= <OrgUnitList> | <FileSelector> | <CSVkmdSelector>
<PrinterACLScopeEntity>::= <PrinterACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<PrinterIDEntity> ::= <PrinterIDList> | <FileSelector> | <CSVkmdSelector>
<PrintJobEntity> ::= <PrintJobIDList> | <FileSelector> | <CSVkmdSelector>
<ResourceEntity> ::= <ResourceIDList> | <FileSelector> | <CSVkmdSelector>
<SchemaEntity> ::= <SchemaNameList> | <FileSelector> | <CSVkmdSelector>
<SiteACLScopeEntity>::= <SiteACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<SiteEntity> ::= <SiteList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<TeamDriveEntity> ::= <TeamDriveID> | (teamdriveid <TeamDriveID>) | (teamdriveid:<TeamDriveID>) | (teamdrive <TeamDriveName>) | (teamdrive:<TeamDriveName>)
<ThreadIDEntity> ::= <ThreadIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<UserEntity> ::= <UserList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

# Meta Commands

## Select a section from gam.cfg and process a GAM command using values from that section
<Select> ::=
	select <Section> [save] [verify]
save
    Set section = <Section> in the [DEFAULT] section and write configuration data to gam.cfg
verify
    Print the variable values for the selected section
    Values are determined in this order: Selected section, DEFAULT section, Program default

## Set variables in gam.cfg.

<Config> ::=
	config (<VariableName> [=] <Value)* [save] [verify]
<VariableName> [=] <Value>
    Set <VariableName> = <Value> in the current section
    All <VariableNames> except section are allowed.
    The = is optional but must be surrounded by spaces if included.
save
    Write configuration data to gam.cfg
verify
    Print the variable values for the current section
    Values are determined in this order: Current section, DEFAULT section, Program default

## File Redirection

If the pattern {{Section}} appears in <FileName>, it will be replaced with the name of the current section.
For redirect csv, the optional arguments must appear in the order shown.
<Redirect> ::=
	redirect csv <FileName> [multiprocess] [append] [noheader] [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] |
	redirect stdout <FileName> [multiprocess] [append] |
	redirect stdout null [multiprocess] |
	redirect stderr <FileName> [multiprocess] [append] |
	redirect stderr null [multiprocess] |
	redirect stderr stdout [multiprocess]

<Select> <Config> <Redirect> must come before all other arguments and in this order,  ... indicates that additional GAM arguments may appear.

gam [<Select>] [<Config>] [<Redirect>] ...

<Select> <Config> <Redirect>] will not be shown in the following command descriptions but can be used with any Gam command.

# Version and Help

gam version [check] [simple]
gam help

# Bulk Processing

gam batch <FileName>|- [charset <Charset>] [showcmds]
gam csv <FileName>|- [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>] (matchfield <FieldName> <RegularExpression>)* gam <GAMArgumentList>
gam tbatch <FileName>|- [charset <Charset>] [showcmds]

gam loop <FileName>|- [charset <Charset>] [columndelimiter <Character>] [quotechar <Character>] [fields <FieldNameList>] (matchfield <FieldName> <RegularExpression>)* gam <GAMArgumentList>

You can make substitutions in <GAMArgumentList> with values from the CSV file.
An argument containing exactly ~xxx is replaced by the value of field xxx from the CSV file
An argument containing instances of ~~xxx~~ has xxx replaced by the value of field xxx from the CSV file
An argument containing instances of ~~xxx~!~pattern~!~replacement~~ has ~~...~~ replaced by re.sub(pattern, replacement, value of field xxx from the CSV file)

Example: gam csv Users.csv gam update user "~primaryEmail" address type work unstructured "~~Street~~, ~~City~~, ~~State~~ ~~ZIP~~" primary note text_plain "~~primaryEmail~!~^(.+)@(.+)$~!~\1 AT \2~~"
Each user (~primaryEmail, e.g. foo@bar.com) would have their work address updated and a note that shows their email address as foo AT bar.com

gam list [todrive [<ToDriveAttributes>]] <EntityList> [data <CrOSTypeEntity>|<UserTypeEntity> [delimiter <Character>]]
gam <CrOSTypeEntity>|<UserTypeEntity> list [todrive [<ToDriveAttributes>]] [data <EntityList> [delimiter <Character>]]

# Authorization

gam create project [<EmailAddress>]
gam update project [<EmailAddress>]

gam oauth|oauth2 create|request [<EmailAddress>]
gam oauth|oauth2 delete|revoke
gam oauth|oauth2 info|verify [<AccessToken>]

gam <UserTypeEntity> check serviceaccount

# Administrators

gam print adminroles|roles [todrive [<ToDriveAttributes>]]

<RoleAssignmentID> ::= <String>
<RoleItem> ::= id:<String>|uid:<string>|<String>

gam create admin <UserItem> <RoleItem> customer|(org_unit <OrgUnitItem>)
gam delete admin <RoleAssignmentId>
gam print admins [todrive [<ToDriveAttributes>]] [user <UserItem>] [role <RoleItem>]

# Aliases

gam create alias|aliases <EmailAddressEntity> user|group|target <UniqueID>|<EmailAddress>
gam update alias|aliases <EmailAddressEntity> user|group|target <UniqueID>|<EmailAddress>
gam delete alias|aliases [user|group|target] <EmailAddressEntity>
gam info alias|aliases <EmailAddressEntity>

gam print alias|aliases [todrive [<ToDriveAttributes>]] [shownoneditable] [nogroups] [nousers] [query <QueryUser>]

gam whatis <EmailItem> [noinfo]

# Auditing

<DestEmailAddress> ::= <EmailAddress>

gam audit uploadkey <ValueReadFromStdin>
gam audit activity request <EmailAddress>
gam audit activity delete <EmailAddress> <RequestID>
gam audit activity download <EmailAddress> <RequestID>
gam audit activity status [<EmailAddress> <RequestID>]

gam audit export request <EmailAddress> [begin <DateTime>] [end <DateTime>]
	[search <QueryGmail>] [headersonly] [includedeleted]
gam audit export delete <EmailAddress> <RequestID>
gam audit export download <EmailAddress> <RequestID>
gam audit export status [<EmailAddress> <RequestID>]
gam audit export watch <EmailAddress> <RequestID>

gam audit monitor create <EmailAddress> <DestEmailAddress> [begin <DateTime>] [end <DateTime>]
	[incoming_headers] [outgoing_headers] [nochats] [nodrafts] [chat_headers] [draft_headers]
gam audit monitor delete <EmailAddress> <DestEmailAddress>
gam audit monitor list <EmailAddress>

# Calendars

<CalendarEntity> ::= <CalendarList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

<CalendarACLRole> ::= editor|freebusy|freebusyreader|owner|reader|writer|none
<ACLScope> ::= <EmailAddress>|user:<EmailAdress>|group:<EmailAddress>|domain:<DomainName>)|domain|default
<ACLScopeList> ::== "<ACLScope>(,<ACLScope>)*"
<ACLScopeEntity>::= <ACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

gam calendar|calendars <CalendarEntity> add acls|calendaracls <CalendarACLRole> <ACLScopeEntity>
gam calendar|calendars <CalendarEntity> update acls|calendaracls <CalendarACLRole> <ACLScopeEntity>
gam calendar|calendars <CalendarEntity> delete acls|calendaracls [<CalendarACLRole>] <ACLScopeEntity>
gam calendar|calendars <CalendarEntity> info acls|calendaracls <ACLScopeEntity>

gam calendar|calendars <CalendarEntity> show acls|calendaracls
gam calendar|calendars <CalendarEntity> print acls|calendaracls [todrive [<ToDriveAttributes>]]

gam calendar|calendars <CalendarEntity> add <CalendarACLRole> ([user] <EmailAddress>)|(group <EmailAddress>)|(domain [<DomainName>])|default
gam calendar|calendars <CalendarEntity> update <CalendarACLRole> ([user] <EmailAddress>)|(group <EmailAddress>)|(domain [<DomainName>])|default
gam calendar|calendars <CalendarEntity> delete [<CalendarACLRole>] ([user] <EmailAddress>)|(group <EmailAddress>)|(domain [<DomainName>])|default
gam calendar|calendars <CalendarEntity> showacl

<EventSelectProperties:> ::=
	(endtime|timemax <Time>)|
	(query <QueryCalendar>)|
	(privateextendedproperty <String>)|
	(sharedextendedproperty <Syting>)|
	showdeletedevents|
	showhiddeninvitations|
	singleevents|
	(starttime|timemin <Time>)|
	(updatedmin <Time>)

<EventMatchProperties:> ::=
	(matchfield attendees <EmailAddressList>)|
	(matchfield creatoremail <RegularExpression>)|
	(matchfield creatorname <RegularExpression>)|
	(matchfield description <RegularExpression>)|
	(matchfield location <RegularExpression>)|
	(matchfield organizeremail <RegularExpression>)|
	(matchfield organizername <RegularExpression>)|
	(matchfield summary <RegularExpression>)

<EventEntity> ::=
	(events <EventIdList> | <FileSelector> | <CSVkmdSelector> | <CSVSubkeySelector> | <CSVDataSelector>)|
	(<EventSelectProperties>+ <EventMatchProperties>*)

<EventAttributes> ::=
	(anyonecanaddself [<Boolean>])|
	(attendee <EmailAddress>)|
	available|
	(colorindex|colorid <EventColorIndex>))|
	(description <String>)|
	(end (allday <Date>)|<Time>)|
	(guestscaninviteothers <Boolean>)|
	guestscantinviteothers|
	(guestscanseeotherguests <Boolean>)|
	guestscantseeotherguests|
	(location <String>)|
	(noreminders|(reminder email|popup|sms <Number>))|
	(optionalattendee <EmailAddress>)|
	(privateproperty <PropertyKey> <PropertyValue>)|
	(recurrence <RRULE, EXRULE, RDATE and EXDATE line>)|
	(reminder <Number> email|popup|sms))|
	(sharedproperty <PropertyKey> <PropertyValue>)|
	(source <String> <URL>)|
	(start (allday <Date>)|<Time>)|
	(status confirmed|tentative|cancelled)|
	(summary <String>)|
	tentative|
	(timezone <TimeZone>)|
	(transparency opaque|transparent)|
	(visibility default|public|private)

<EventAddAttributes> ::=
	<EventAttributes>|
	notifyattendees|(sendnotifications <Boolean>)

<EventImportAttributes> ::=
	<EventAttributes>|
	(organizername <String>)|
	(organizeremail <EmailAddress>)

<EventUpdateAttributes> ::=
	<EventAttributes>|
	notifyattendees|(sendnotifications <Boolean>)|
	(clearprivateproperty <PropertyKey>)|
	(clearsharedproperty <PropertyKey>)

The following attributes are equivalent:
	available = transparency transparent
	guestscantinviteothers = guestscaninviteothers False
	guestscantseeothers = guestscanseeotherguests False
	tentative = status tentative

gam calendar|calendars <CalendarEntity> add event [id <String>] <EventAddAttributes>+
gam calendar|calendars <CalendarEntity> import event icaluid <iCalUID> <EventImportAttributes>+
gam calendar|calendars <CalendarEntity> update events <EventEntity> <EventUpdateAttributes>+
gam calendar|calendars <CalendarEntity> delete events <EventEntity> [doit] [notifyattendees]
gam calendar|calendars <CalendarEntity> wipe events
gam calendar|calendars <CalendarEntity> move events <EventEntity> to <CalendarItem> [notifyattendees]
gam calendar|calendars <CalendarEntity> info events <EventEntity> [maxinstances <Number>]

<EventDisplayProperties> ::=
	(alwaysincludeemail)|
	(icaluid <String>)|
	(maxattendees <Integer>)|
	(orderby starttime|updated)|
	(timezone <TimeZone>)

gam calendar|calendars <CalendarEntity> show events ([allevents] <EventSelectProperties>*) <EventDisplayProperties>*
gam calendar|calendars <CalendarEntity> print events [todrive [<ToDriveAttributes>]] <EventSelectProperties>*) [todrive [<ToDriveAttributes>]] <EventDisplayProperties>*

gam calendar|calendars <CalendarEntity> addevent <EventAddAttributes>+
gam calendar|calendars <CalendarEntity> deleteevent <EventEntity> [doit] [notifyattendees]
gam calendar|calendars <CalendarEntity> wipe

# ChromeOS Devices

<CrOSAttributes> ::=
	(asset|assetid|tag <String>)|
	(location <String>)|
	(notes <String>)|
	(org|ou <OrgUnitPath>)|
	(user <String>)

<CrOSAction> ::=
	deprovision_same_model_replace|
	deprovision_different_model_replace|
	deprovision_retiring_device|
	disable|
	reenable

gam update cros <CrOSEntity> (<CrOSAttributes>+ [quickcrosmove [<Boolean>]])|(action <CrOSAction> [acknowledge_device_touch_requirement])
gam <CrOSTypeEntity> update (<CrOSAttributes>+ [quickcrosmove [<Boolean>]])|(action <CrOSAction> [acknowledge_device_touch_requirement])

<CrOSFieldName> ::=
	activetimeranges|timeranges|
	annotatedassetid|assedid|asset|
	annotatedlocation|location|
	annotateduser|user|
	bootmode|
	deviceid|
	ethernetmacaddress|
	firmwareversion|
	lastenrollmenttime|
	lastsync|
	macaddress|
	meid|
	model|
	notes|
	ordernumber|
	orgunitpath|org|ou|
	osversion|
	platformversion|
	recentusers|
	serialnumber|
	status|
	supportenddate|
	willautorenew
<CrOSFieldNameList> ::= "<CrOSFieldName>(,<CrOSFieldName>)*"

<CrOSOrderByFieldName> ::=
	lastsync|location|notes|serialnumber|status|supportenddate|user

gam info cros <CrOSEntity> [nolists] [listlimit <Number>] [start <Date>] [end <Date>]
	[basic|full|allfields] <CrOSFieldName>* [fields <CrOSFieldNameList>]
gam <CrOSTypeEntity> info [nolists] [listlimit <Number>] [start <Date>] [end <Date>]
	[basic|full|allfields] <CrOSFieldName>* [fields <CrOSFieldNameList>]

Print no header row and deviceId for specified CrOS devices; there is no CSV file redirection with these commands.

gam <CrOSTypeEntity> print
gam <CrOSTypeEntity> print cros

All of the following commands support CSV file redirection.

Print a header row and deviceId for all CrOS devices.

gam print cros

Print a header row and selected fields for specified CrOS devices; deviceId is the always the first column.
If you specify allfields|basic|full, all other column headers are sorted.
If you specify <CrOSFieldName>* | fields <CrOSFieldNameList>, the column headers appear in the order specified.
gam [<CrOSTypeEntity>] print cros [todrive [<ToDriveAttributes>]] [query <QueryCrOS>]|[select <CrOSTypeEntity>] [limittoou <OrgUnitItem>]
	[orderby <CrOSOrderByFieldName> [ascending|descending]] [nolists] [listlimit <Number>] [start <Date>] [end <Date>]
	[basic|full|allfields] <CrOSFieldName>* [fields <CrOSFieldNameList>]

The basic argument outputs these column headers: deviceId,annotatedAssetId,annotatedLocation,annotatedUser,lastSync,notes,serialNumber,status
The allfields/full arguments output all column headers including two headers, recentUsers and activeTimeRanges,
that repeat with two/four subvalues each, yielding a large number of columns that make the output hard to process.
The nolists argument suppresses these two headers; if you want these headers in a more manageable form use the following arguments.
If recentusers is specified, for each recent user, the columns recentUsers.email and recentUsers.type are output on a separate row
with all of the other headers.
If timeranges is specified, for each time range entry, the columns activeTimeRanges.date, activeTimeRange.activeTime,
activeTimeRanges.duration and activeTimeRanges.minutes are output on a separate row with all of the other headers.
The listlimit <Number> argument limits the number of repetitions to <Number>; if not specified or <Number> equals zero, there is no limit.
The start <Date> and end <Date> arguments filter the time ranges.

gam [<CrOSTypeEntity>] print crosactivity [todrive [<ToDriveAttributes>]] [query <QueryCrOS>]|[select <CrOSTypeEntity>] [limittoou <OrgUnitItem>]
	[orderby <CrOSOrderByFieldName> [ascending|descending]] [recentusers] [timeranges] [listlimit <Number>] [start <Date>] [end <Date>]
	[delimiter <Character>]

The basic column headers are: deviceId,annotatedAssetId,annotatedLocation,serialNumber,orgUnitPath.
If recentusers is specified, all of the recent users email addresses, separated by the delimiter <Character>,
with header recentUsers.email, are output with the basic headers.
If timeranges is specified, for each time range entry, activeTimeRanges.date and activeTimeRanges.duration and activeTimeRanges.minutes,
are output on a separate row with the basic headers.
The default is to include both recentusers and timeranges.
The listlimit <Number> argument limits the number of recent users and time ranges to <Number>; if not specified or <Number> equals zero, there is no limit.
The start <Date> and end <Date> arguments filter the time ranges.
Delimiter defaults to gam.cfg/csv_output_field_delimiter.

# Contacts

<ContactAttributes> ::=
	(additionalname|middlename <String>)|
	(address clear|(work|home|other|<String> (formatted|unstructured <String>)|(streetaddress <String>)|(pobox <String>)|
	    (neighborhood <String>)|(locality <String>)|(region <String>)|(postalcode <String>)|(country <String>) notprimary|primary))|
	(billinginfo <String>)|
	(birthday <Date>)|
	(calendar clear|(work|home|free-busy|<String> <URL> notprimary|primary))|
	(contactgroup clear|<ContactGroupItem>)|
	(directoryserver <String>)|
	(email clear|(work|home|other|<String> <EmailAddress> notprimary|primary))|
	(event clear|(anniversary|other|<String> <Date>))|
	(externalid clear|(account|customer|network|organization|<String> <String>))|
	(familyname|lastname <String>)|
	(gender female|male)|
	(givenname|firstname <String>)|
	(hobby clear|(<String>))|
	(im clear|(work|home|other|<String> aim|gtalk|icq|jabber|msn|net_meeting|qq|skype|yahoo <String> notprimary|primary))|
	(initials <String>)|
	(jot clear|(work|home|other|keywords|user> <String>))|
	(language <Language>)|
	(location <String>)|
	(maidenname <String>)|
	(mileage <String>)|
	(name <String>)|
	(nickname <String>)|
	(note <String>|(file <FileName> [charset <Charset>]))|
	(occupation <String>)|
	(organization clear|(work|other|<String> <String>|(location <String>)|(department <String>)|(title <String>)|(jobdescription <String>)|(symbol <String>) notprimary|primary))|
	(phone clear|(work|home|other|fax|work_fax|home_fax|other_fax|main|company_main|assistant|mobile|work_mobile|pager|work_pager|car|radio|callback|isdn|telex|tty_tdd|<String> <String> notprimary|primary))|
	(prefix <String>)|
	(relation clear|(spouse|child|mother|father|parent|brother|sister|friend|relative|domestic_partner|manager|assistant|referred_by|partner|<String> <String>))|
	(shortname <String>)|
	(subject <String>)|
	(suffix <String>)|
	(userdefinedfield clear|(<String> <String>))|
	(website clear|(home_page|blog|profile|work|home|other|ftp|reservations|app_install_page|<String> <URL> notprimary|primary))

<ContactGroupAttributes> ::=
	(name <String>)

gam create contact <ContactAttributes>+
gam update contacts <ContactEntity> <ContactAttributes>+
gam delete contacts <ContactEntity>|([query <QueryContact>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]

<ContactFieldName> ::=
	additionalname|middlename|
	address|
	billinginfo|
	birthday|
	calendar|
	contactgroup|
	directoryserver|
	email|
	event|
	externalid|
	familyname|lastname|
	gender|
	givenname|firstname|
	hobby|
	im|
	initials|
	jot|
	language|
	location|
	maidenname|
	mileage|
	name|
	nickname|
	note|
	occupation|
	organization|
	phone|
	prefix|
	relation|
	shortname|
	subject|
	suffix|
	updated|
	userdefinedfield|
	website
<ContactFieldNameList> ::= "<ContactFieldName>(,<ContactFieldName>)*"

<ContactOrderByFieldName> ::=
	lastmodified

gam info contacts <ContactEntity> [basic|full] [showgroups] [fields <ContactFieldNameList>]
gam show contacts [query <QueryContact>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [showgroups] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]
gam print contacts [todrive [<ToDriveAttributes>]] [query <QueryContact>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [showgroups] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]

gam <UserTypeEntity> create contact [contactgroup <ContactGroupItem>] <ContactAttributes>+
gam <UserTypeEntity> update contacts <ContactEntity> [contactgroup <ContactGroupItem>] <ContactAttributes>+
gam <UserTypeEntity> delete contacts <ContactEntity>|([query <QueryContact>] [contactgroup <ContactGroupItem>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]

gam <UserTypeEntity> info contacts <ContactEntity> [basic|full] [showgroups] [fields <ContactFieldNameList>]
gam <UserTypeEntity> show contacts [query <QueryContact>] [contactgroup <ContactGroupItem>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [showgroups] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]
gam <UserTypeEntity> print contacts [todrive [<ToDriveAttributes>]] [query <QueryContact>] [contactgroup <ContactGroupItem>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [showgroups] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]

gam <UserTypeEntity> create contactgroup <ContactGroupAttributes>+
gam <UserTypeEntity> update contactgroup <ContactGroupItem> <ContactGroupAttributes>+
gam <UserTypeEntity> delete contactgroups <ContactGroupEntity>

gam <UserTypeEntity> info contactgroups <ContactGroupEntity>
gam <UserTypeEntity> show contactgroups [updated_min <Date>]
	[basic|full] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]]
gam <UserTypeEntity> print contactgroups [todrive [<ToDriveAttributes>]] [updated_min <Date>]
	[basic|full] [showdeleted] [orderby <ContactOrderByFieldName> [ascending|descending]]

gam <UserTypeEntity> info gal <ContactEntity> [basic|full] [fields <ContactFieldNameList>]
gam <UserTypeEntity> show gal [query <QueryContact>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]
gam <UserTypeEntity> print gal [todrive [<ToDriveAttributes>]] [query <QueryContact>] [emailmatchpattern <RegularExpression>] [emailmatchtype work|home|other|<String>] [updated_min <Date>]
	[basic|full] [orderby <ContactOrderByFieldName> [ascending|descending]] [fields <ContactFieldNameList>]

# Courses

<CourseAttributes> ::=
	(description <String>)|
	(heading <String>)|
	(name <String>)|
	(room <String>)|
	(section <string>)|
	(state|status <CourseState>)|
	(owner|ownerid|teacher <UserItem>)

<CourseFieldName> ::=
	aliases|
	alternatelink|
	coursegroupemail|
	coursematerialsets|
	coursestate|
	creationtime|
	description|
	descriptionheading|
	enrollmentcode|
	guardiansenabled|
	id|
	name|
	owneremail|
	ownerid|
	room|
	section|
	students|
	teacherfolder|
	teachergroupemail|
	teachers|
	updatetime
<CourseFieldNameList> ::= "<CourseFieldName>(,<CourseFieldName>)*"

gam create course id|alias <CourseAlias> <CourseAttributes>*
gam update course <CourseID> <CourseAttributes>+
gam delete course <CourseID>

gam update courses <CourseEntity> <CourseAttributes>+
gam delete courses <CourseEntity>

gam course <CourseID> add alias <CourseAlias>
gam course <CourseID> delete alias <CourseAlias>

gam course <CourseID> add teachers|students <UserItem>
gam course <CourseID> delete|remove teachers|students <UserItem>
gam course <CourseID> sync teachers|students <UserTypeEntity>

gam courses <CourseEntity> add alias <CourseAliasEntity>
gam courses <CourseEntity> delete alias <CourseAliasEntity>

gam courses <CourseEntity> add teachers|students <UserTypeEntity>
gam courses <CourseEntity> delete|remove teachers|students <UserTypeEntity>
gam courses <CourseEntity> sync teachers|students <UserTypeEntity>

gam info course <CourseID> [owneremail] [alias|aliases] [show all|students|teachers] [countsonly]
	[fields <CourseFieldNameList>] [skipfields <CourseFieldNameList>]
gam info courses <CourseEntity> [owneremail] [alias|aliases] [show all|students|teachers] [countsonly]
	[fields <CourseFieldNameList>] [skipfields <CourseFieldNameList>]
gam print courses [todrive [<ToDriveAttributes>]] (course|class <CourseID>)*|([teacher <UserItem>] [student <UserItem>] [states <CourseStateList>])
	[owneremail] [alias|aliases][delimiter <Character>] [show all|students|teachers] [countsonly]
	[fields <CourseFieldNameList>] [skipfields <CourseFieldNameList>]
gam print course-participants [todrive [<ToDriveAttributes>]] (course|class <CourseID>)*|([teacher <UserItem>] [student <UserItem>] [states <CourseStateList>])
	[show all|students|teachers]

# Customer

<CustomerAttributes> ::=
	(primary <DomainName>)|
	(adminsecondaryemail|alternateemail <EmailAddress>)|
	(contact|contactname <String>)|
	(language <LanguageCode>)|
	(phone|phonenumber <String>)|
	(name|organizationname <String>)|
	(address|address1|addressline1 <String>)|
	(address2|addressline2 <String>)|
	(address3|addressline3 <String>)|
	(city|locality <String>)|
	(state|region <String>)|
	(zipcode|postal|postalcode <String>)|
	(country|countrycode <String>)

gam update customer <CustomerAttributes>*

gam info customer

gam update instance sso_settings [enabled <Boolean>] [sign_on_uri <URI>] [sign_out_uri <URI>] [password_uri <URI>] [whitelist <CIDRnetmask>] [use_domain_specific_issuer <Boolean>]
gam update instance sso_key <FileName>
gam update instance logo <FileName>

gam info instance [logo <FileName>]

# Data Transfers

gam print transferapps

<DataTransferService> ::= googledrive|gdrive|drive|"drive and docs"|calendar

<OldOwnerID> ::= <UserItem>
<NewOwnerID> ::= <UserItem>

gam create datatransfer|transfer <OldOwnerID> <DataTransferService> <NewOwnerID> [private|shared|all] (<ParameterKey> <ParameterValue>)*

gam info datatransfer|transfer <TransferID>
gam print datatransfers|transfers [todrive [<ToDriveAttributes>]] [olduser|oldowner <UserItem>] [newuser|newowner <UserItem>] [status <String>] [delimiter <Character>]

# Domains

<DomainAlias> ::= <String>

gam create domain <DomainName>
gam update domain <DomainName> primary
gam delete domain <DomainName>

gam info domain [<DomainName>]
gam print domains [todrive [<ToDriveAttributes>]]

gam create domainalias|aliasdomain <DomainAlias> <DomainName>
gam delete domainalias|aliasdomain <DomainAlias>

gam info domainalias|aliasdomain <DomainAlias>
gam print domainaliases|aliasdomains [todrive [<ToDriveAttributes>]]

# Groups

<GroupAttributes> ::=
	(allowexternalmembers <Boolean>)|
	(allowgooglecommunication <Boolean>)|
	(allowwebposting <Boolean>)|
	(archiveonly <Boolean>)|
	(customfootertext <String>)|
	(customreplyto <EmailAddress>)|
	(defaultmessagedenynotificationtext <String>)|
	(description <String>)|
	(gal|includeInGlobalAddressList <Boolean>)|
	(includecustomfooter <Boolean>)|
	(isarchived <Boolean>)|
	(maxmessagebytes <ByteCount>)|
	(memberscanpostasthegroup <Boolean>)|
	(messagedisplayfont DEFAULT_FONT|FIXED_WIDTH_FONT)|
	(messagemoderationlevel MODERATE_ALL_MESSAGES|MODERATE_NON_MEMBERS|MODERATE_NEW_MEMBERS|MODERATE_NONE)|
	(name <String>)|
	(primarylanguage <Language>)|
	(replyto REPLY_TO_CUSTOM|REPLY_TO_SENDER|REPLY_TO_LIST|REPLY_TO_OWNER|REPLY_TO_IGNORE|REPLY_TO_MANAGERS)|
	(sendmessagedenynotification <Boolean>)|
	(showingroupdirectory <Boolean>)|
	(spammoderationlevel ALLOW|MODERATE|SILENTLY_MODERATE|REJECT)|
	(whocanadd ALL_MEMBERS_CAN_ADD|ALL_MANAGERS_CAN_ADD|NONE_CAN_ADD)|
	(whocancontactowner ANYONE_CAN_CONTACT|ALL_IN_DOMAIN_CAN_CONTACT|ALL_MEMBERS_CAN_CONTACT|ALL_MANAGERS_CAN_CONTACT)|
	(whocaninvite ALL_MEMBERS_CAN_INVITE|ALL_MANAGERS_CAN_INVITE|NONE_CAN_INVITE)|
	(whocanjoin ANYONE_CAN_JOIN|ALL_IN_DOMAIN_CAN_JOIN|INVITED_CAN_JOIN|CAN_REQUEST_TO_JOIN)|
	(whocanleavegroup ALL_MANAGERS_CAN_LEAVE|ALL_MEMBERS_CAN_LEAVE|NONE_CAN_LEAVE)|
	(whocanpostmessage NONE_CAN_POST|ALL_MANAGERS_CAN_POST|ALL_MEMBERS_CAN_POST|ALL_IN_DOMAIN_CAN_POST|ANYONE_CAN_POST)|
	(whocanviewgroup ANYONE_CAN_VIEW|ALL_IN_DOMAIN_CAN_VIEW|ALL_MEMBERS_CAN_VIEW|ALL_MANAGERS_CAN_VIEW)|
	(whocanviewmembership ALL_IN_DOMAIN_CAN_VIEW|ALL_MEMBERS_CAN_VIEW|ALL_MANAGERS_CAN_VIEW)

gam create group <EmailAddress> <GroupAttributes>*
gam update group|groups <GroupEntity> [admincreated <Boolean>] [email <EmailAddress>] <GroupAttributes>*
gam update group|groups <GroupEntity> add [owner|manager|member] [notsuspended] <UserTypeEntity>
gam update group|groups <GroupEntity> delete|remove [owner|manager|member] <UserTypeEntity>
gam update group|groups <GroupEntity> sync [owner|manager|member] [notsuspended] <UserTypeEntity>
gam update group|groups <GroupEntity> update [owner|manager|member] <UserTypeEntity>
gam update group|groups <GroupEntity> clear [member] [manager] [owner] [suspended]
gam delete group|groups <GroupEntity>

<GroupFieldName> ::=
	admincreated|
	aliases|
	allowexternalmembers|
	allowgooglecommunication|
	allowwebposting|
	archiveonly|
	customreplyto|
	defaultmessagedenynotificationtext|
	description|
	directmemberscount|
	email|
	id|
	includeinglobaladdresslist|gal|
	isarchived|
	maxmessagebytes|
	memberscanpostasthegroup|
	messagedisplayfont|
	messagemoderationlevel|
	name
	primarylanguage|
	replyto|
	sendmessagedenynotification|
	showingroupdirectory|
	spammoderationlevel|
	whocanadd|
	whocancontactowner|
	whocaninvite|
	whocanjoin|
	whocanleavegroup|
	whocanpostmessage|
	whocanviewgroup|
	whocanviewmembership
<GroupFieldNameList> ::= "<GroupFieldName>(,<GroupFieldName>)*"

gam info group|groups <GroupEntity> [members] [managers] [owners] [nousers] [quick] [noaliases] [groups] <GroupFieldName>* [fields <GroupFieldNameList>] [formatjson]
gam print groups [todrive [<ToDriveAttributes>]] ([domain <DomainName>] [member <UserItem>])|[select <GroupEntity>]
	[maxresults <Number>] [allfields|([settings] <GroupFieldName>* [fields <GroupFieldNameList>])] [convertcrnl] [delimiter <Character>]
	[members|memberscount] [managers|managerscount] [owners|ownerscount] [countsonly]

<MembersFieldName> ::=
	email|useremail|
	groupemail|
	id|
	name|
	role|
	status|
	type
<MembersFieldNameList> ::= "<MembersFieldName>(,<MembersFieldName>)*"

gam print group-members|groups-members [todrive [<ToDriveAttributes>]] ([domain <DomainName>] [member <UserItem>])|[group <GroupItem>]|[select <GroupEntity>]
	[members] [managers] [owners] [membernames] <MembersFieldName>* [fields <MembersFieldNameList>] [userfields <UserFieldNameList>] [recursive [noduplicates]]

# Guardians

<GuardianState> ::=
	complete|
	pending
<GuardianStateList> ::= "<GuardianState>(,<GuardianState>)*"

gam create guardian|guardianinvite|inviteguardian <EmailAddress> <StudentItem>
gam cancel guardianinvitation|guardianinvitations <GuardianInvitationID> <StudentItem>
gam delete guardian|guardians <GuardianItem> <StudentItem> invitation
gam show guardian|guardians invitations [states <GuardianStateList>] [invitedguardian <EmailAddress>] [student <StudentItem>] [<UserTypeEntity>]
gam print guardian|guardians invitations [todrive [<ToDriveAttributes>]] [states <GuardianStateList>] [invitedguardian <EmailAddress>] [student <StudentItem>] [<UserTypeEntity>]

gam delete guardian|guardians <GuardianItem> <StudentItem>
gam show guardian|guardians [invitedguardian <EmailAddress>] [student <StudentItem>] [<UserTypeEntity>]
gam print guardian|guardians [todrive [<ToDriveAttributes>]] [invitedguardian <EmailAddress>] [student <StudentItem>] [<UserTypeEntity>]

# Licenses

gam print licenses [todrive [<ToDriveAttributes>]] [(products|product <ProductIDList>)|(skus|sku <SKUIDList>)]

# Mobile Devices

<MobileAction> ::=
	admin_remote_wipe|wipe|
	admin_account_wipe|accountwipe|wipeaccount|
	approve|
	block|
	cancel_remote_wipe_then_activate|
	cancel_remote_wipe_then_block

gam update mobile <MobileEntity> action <MobileAction>
gam delete mobile <MobileEntity>

<MobileFieldName> ::=
	adbstatus|
	applications|
	basebandversion|
	bootloaderversion|
	brand|
	buildnumber|
	defaultlanguage|
	developeroptionsstatus|
	devicecompromisedstatus|
	deviceid|
	devicepasswordstatus|
	email|
	encryptionstatus|
	firstsync|
	hardware|
	hardwareid|
	imei|
	kernelversion|
	lastsync|
	managedaccountisonownerprofile|
	manufacturer|
	meid|
	model|
	name|
	networkoperator|
	os|
	otheraccountsinfo|
	privilege|
	releaseversion|
	resourceid|
	securitypatchlevel|
	serialnumber|
	status|
	supportsworkprofile|
	type|
	unknownsourcesstatus|
	useragent|
	wifimacaddress

<MobileFieldNameList> ::= "<MobileFieldName>(,<MobileFieldName>)*"

<MobileOrderByFieldName> ::=
	deviceid|email|lastsync|model|name|os|status|type

gam info mobile <MobileEntity>
	[basic|full|allfields] <MobileFieldName>* [fields <MobileFieldNameList>]
gam print mobile [todrive [<ToDriveAttributes>]] [query <QueryMobile>]
	[orderby <MobileOrderByFieldName> [ascending|descending]]
	[basic|full|allfields] <MobileFieldName>* [fields <MobileFieldNameList>]
	[delimiter <Character>] [appslimit <Number>] [listlimit <Number>]

# Notifications

gam update notification|notifications [(id all)|(id <NotificationID>)*] unread|read|unreadonly
gam delete notification|notifications [(id all)|(id <NotificationID>)*] [unreadonly|unread|read]
gam info notification|notifications [unread|read|unreadonly]

# Organizational Units

<OrgUnitFieldName> ::=
	description|
	id|orgunitid|
	inherit|blockinheritance|
	name|
	parentid|parentorgunitid|
	parent|parentorgunitpath|
	path|orgunitpath
<OrgUnitFieldNameList> ::= "<OrgUnitFieldName>(,<OrgUnitFieldName>)*"

gam create org|ou <OrgUnitPath> [description <String>] [parent <OrgUnitItem>] [inherit|noinherit|(blockinheritance <Boolean>)] [buildpath]
gam update org|ou <OrgUnitItem> [name <String>] [description <String>] [parent <OrgUnitItem>] [inherit|noinherit|(blockinheritance <Boolean>)]
gam update org|ou <OrgUnitItem> add|move <CrOSTypeEntity> [quickcrosmove [<Boolean>]]
gam update org|ou <OrgUnitItem> add|move <UserTypeEntity>
gam delete org|ou <OrgUnitItem>
gam info org|ou <OrgUnitItem> [nousers] [children|child]

gam update orgs|ous <OrgUnitEntity> [name <String>] [description <String>] [parent <OrgUnitItem>] [inherit|noinherit|(blockinheritance <Boolean>)]
gam update orgs|ous <OrgUnitEntity> add|move <CrOSTypeEntity> [quickcrosmove [<Boolean>]]
gam update orgs|ous <OrgUnitEntity> add|move <UserTypeEntity>
gam delete orgs|ous <OrgUnitEntity>
gam info orgs|ous <OrgUnitEntity> [nousers] [children|child]

gam print orgs|ous [todrive [<ToDriveAttributes>]] [showparent] [toplevelonly] [fromparent <OrgUnitItem>]
	[allfields|<OrgUnitFieldName>*|(fields <OrgUnitFieldNameList>)] [convertcrnl] [batchsuborgs [<Boolean>]]
gam show orgtree [fromparent <OrgUnitItem>] [batchsuborgs [<Boolean>]]

# Printers

<PrinterAttributes> ::=
	(currentquota <Number>)|
	(dailyquota <Number>)|
	(defaultdisplayname <String>)|
	(description <String>)|
	(displayname <String>)|
	(firmware <String>)|
	(gcpversion <String>)|
	(istosaccepted <Boolean>)|
	(manufacturer <String>)|
	(model <String>)|
	(name <String>)|
	(ownerid <EmailAddress>)|
	(proxy <String>)|
	(public <Boolean>)|
	(quotaenabled <Boolean>)|
	(setupurl <URL>)|
	(status <Number>)|
	(supporturl <URL>)|
	(type <String>)|
	(updateurl <URL>)|
	(uuid <String>)

gam update printer|printers <PrinterIDEntity> <PrinterAttributes>+
gam delete printer|printers <PrinterIDEntity>
gam info printer|printers <PrinterIDEntity> [everything]

gam print printer|printers [todrive [<ToDriveAttributes>]] [query <QueryPrinter>] [type <String>] [status <String>] [extrafields <String>] [delimiter <Character>]

<PrinterACLScope> ::= <EmailAddress>|user:<EmailAdress>|group:<EmailAddress>|domain:<DomainName>|domain|public
<PrinterACLScopeList> ::== "<PrinterACLScope>(,<PrinterACLScope>)*"
<PrinterACLScopeEntity>::= <PrinterACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

gam printer|printers <PrinterIDEntity> add user|manager|owner <PrinterACLScopeEntity> [notify]
gam printer|printers <PrinterIDEntity> delete <PrinterACLScopeEntity>
gam printer|printers <PrinterIDEntity> sync user|manager|owner <PrinterACLScopeEntity> [notify]
gam printer|printers <PrinterIDEntity> wipe user|manager|owner
gam printer|printers <PrinterIDEntity> showacls
gam printer|printers <PrinterIDEntity> printacls [todrive [<ToDriveAttributes>]]

# Printjobs

gam printjob <PrinterID> submit <FileName>|<URL> [name|title <String>] (tag <String>)*
gam printjob|printjobs <PrintJobEntity> cancel
gam printjob|printjobs <PrintJobEntity> delete
gam printjob|printjobs <PrintJobEntity> resubmit <PrinterID>

<PrintJobOrderByFieldName> ::=
	create_time|status|title

gam printjob|printjobs <PrinterID>|any fetch
	[olderthan|newerthan <PrintJobAge>] [query <QueryPrintJob>]
	[status <PrintJobStatus>]
	[orderby <PrintJobOrderByFieldName> [ascending|descending]]
	[owner|user <EmailAddress>]
	[limit <Number>] [drivedir|(targetfolder <FilePath>)]

gam print printjob|printjobs [todrive [<ToDriveAttributes>]] [printer|printerid <PrinterID>]
	[olderthan|newerthan <PrintJobAge>] [query <QueryPrintJob>]
	[status <PrintJobStatus>]
	[orderby <PrintJobOrderByFieldName> [ascending|descending]]
	[owner|user <EmailAddress>]
	[limit <Number>] [delimiter <Character>]

# Reports

gam report users|user [todrive [<ToDriveAttributes>]] [nodatechange] [maxresults <Number>] [maxactivities <Number>]
	[date <Date>] [(user all|<UserItem>)|(select <UserTypeEntity>)] [filter|filters <String>] [fields|parameters <String>]
gam report customers|customer|domain [todrive [<ToDriveAttributes>]] [nodatechange]
	[date <Date>] [fields|parameters <String>]
gam report admin|calendar|calendars|drive|docs|doc|groups|group|logins|login|mobile|tokens|token [todrive [<ToDriveAttributes>]] [maxresults <Number>] [maxactivities <Number>]
	[([start <Time>] [end <Time>])|yesterday] [(user all|<UserItem>)|(select <UserTypeEntity>)] [event <String>] [filter|filters <String>] [ip <String>] [countsonly] [summary]

# Reseller

<ResoldCustomerAttributes> ::=
	(email|alternateemail <EmailAddress>)|
	(contact|contactname <String>)|
	(phone|phonenumber <String>)|
	(name|organizationname <String>)|
	(address|address1|addressline1 <String>)|
	(address2|addressline2 <String>)|
	(address3|addressline3 <String>)|
	(city|locality <String>)|
	(state|region <String>)|
	(zipcode|postal|postalcode <String>)|
	(country|countrycode <String>)

gam create resoldcustomer <CustomerDomain> (customer_auth_token <String>) <ResoldCustomerAttributes>+
gam update resoldcustomer <CustomerID> [customer_auth_token <String>] <ResoldCustomerAttribues>+
gam info resoldcustomer <CustomerID>

gam create resoldsubscription <CustomerID> (sku <SKUID>)
	 (plan annual_monthly_pay|annual_yearly_pay|flexible|trial) (seats <NumberOfSeats> <MaximumNumberOfSeats>)
	 [customer_auth_token <String>] [deal <String>] [purchaseorderid <String>]
gam update resoldsubscription <CustomerID> <SKUID>
	activate|suspend|startpaidservice|
	(renewal auto_renew_monthly_pay|auto_renew_yearly_pay|cancel|renew_current_users_monthly_pay|renew_current_users_yearly_pay|switch_to_pay_as_you_go)|
	(seats <NumberOfSeats> [<MaximumNumberOfSeats>])|
	(plan annual_monthly_pay|annual_yearly_pay|flexible|trial [deal <String>] [purchaseorderid <String>] [seats <NumberOfSeats> [<MaximumNumberOfSeats>]])
gam delete resoldsubscription <CustomerID> <SKUID> cancel|downgrade|transfer_to_direct
gam info resoldsubscription <CustomerID> <SKUID>
gam show resoldsubscriptions [customerid <CustomerID>] [customer_auth_token <String>] [customer_prefix <String>]
gam print resoldsubscriptions [todrive [<ToDriveAttributes>]] [customerid <CustomerID>] [customer_auth_token <String>] [customer_prefix <String>]

# Resource Calendars

<ResourceFieldName> ::=
	acls|
	description|
	email|
	id|
	name|
	type
<ResourceFieldNameList> ::= "<ResourceFieldName>(,<ResourceFieldName>)*"

gam create resource <ResourceID> <String> [description <String>] [type <String>]
gam update resource <ResourceID> [name <String>] [description <String>] [type <String>]
gam delete resource <ResourceID>
gam info resource <ResourceID>

gam update resources <ResourceEntity> [name <String>] [description <String>] [type <String>]
gam delete resources <ResourceEntity>
gam info resources <ResourceEntity>

gam show resources [allfields|<ResourceFieldName>*|(fields <ResourceFieldNameList>)] [convertcrnl]
gam print resources [todrive [<ToDriveAttributes>]] [allfields|<ResourceFieldName>*|(fields <ResourceFieldNameList>)] [convertcrnl]

gam resource <ResourceID> add acls|calendaracls <CalendarACLRole> <CalendarACLScopeEntity>
gam resource <ResourceID> update acls|calendaracls <CalendarACLRole> <CalendarACLScopeEntity>
gam resource <ResourceID> delete acls|calendaracls <CalendarACLRole>] <CalendarACLScopeEntity>
gam resource <ResourceID> info acls|calendaracls <CalendarACLScopeEntity>

gam resource <ResourceID> show acls|calendaracls
gam resource <ResourceID> print acls|calendaracls [todrive [<ToDriveAttributes>]]

gam resources <ResourceEntity> add acls|calendaracls <CalendarACLRole> <CalendarACLScopeEntity>
gam resources <ResourceEntity> update acls|calendaracls <CalendarACLRole> <CalendarACLScopeEntity>
gam resources <ResourceEntity> delete acls|calendaracls <CalendarACLRole>] <CalendarACLScopeEntity>
gam resources <ResourceEntity> info acls|calendaracls <CalendarACLScopeEntity>

gam resources <ResourceEntity> show acls|calendaracls
gam resources <ResourceEntity> print acls|calendaracls [todrive [<ToDriveAttributes>]]

# Schemas

<SchemaFieldDefinition> ::=
	field <FieldName> (type bool|date|double|email|int64|phone|string) [multivalued|multivalue] [indexed] [restricted] [range <Number> <Number>] endfield

gam create schema|schemas <SchemaName> <SchemaFieldDefinition>+
gam update schema <SchemaName> <SchemaFieldDefinition>* (deletefield <FieldName>)*
gam delete schema <SchemaName>
gam info schema <SchemaName>

gam update schemas <SchemaEntity> <SchemaFieldDefinition>* (deletefield <FieldName>)*
gam delete schemas <SchemaEntity>
gam info schemas <SchemaEntity>

gam show schema|schemas
gam print schema|schemas [todrive [<ToDriveAttributes>]]

# Sites

<SiteAttributes> ::=
	(categories <String>)|
	(name <String>)|
	(sourcelink <URI>])|
	(summary <String>)|
	(theme <String>)

<SiteACLRole> ::= editor|invite|owner|reader|writer
<SiteACLRoleList> ::= "<SiteACLRole>(,<SiteACLRole>)*"

gam [<UserTypeEntity>] create site <SiteItem> <SiteAttributes>*
gam [<UserTypeEntity>] update sites <SiteEntity> <SiteAttributes>+
gam [<UserTypeEntity>] info sites <SiteEntity> [withmappings] [role|roles all|<SiteACLRoleList>]
gam [<UserTypeEntity>] show sites [domain|domains <DomainNameEntity>] [includeallsites]
	[withmappings] [role|roles all|<SiteACLRoleList>] [maxresults <Number>]
gam [<UserTypeEntity>] print sites [todrive [<ToDriveAttributes>]] [domain|domains <DomainNameEntity>] [includeallsites]
	[withmappings] [role|roles all|<SiteACLRoleList>] [maxresults <Number>] [convertcrnl] [delimiter <Character>]

gam [<UserTypeEntity>] print siteactivity <SiteEntity> [todrive [<ToDriveAttributes>]] [maxresults <Number>] [updated_min <Date>] [updated_max <Date>]

gam [<UserTypeEntity>] add siteacls <SiteEntity> <SiteACLRole> <SiteACLScopeEntity>
gam [<UserTypeEntity>] update siteacls <SiteEntity> <SiteACLRole> <SiteACLScopeEntity>
gam [<UserTypeEntity>] delete siteacls <SiteEntity> <SiteACLScopeEntity>
gam [<UserTypeEntity>] info siteacls <SiteEntity> <SiteACLScopeEntity>
gam [<UserTypeEntity>] show siteacls  <SiteEntity>

# Vault

gam create vaulthold|hold corpus drive|groups|mail matter <MatterItem> [name <String>] [query <QueryVaultCorpus>]
	[(accounts|groups|users <EmailItemList>) | (orgunit|ou <OrgUnit>)]
	[starttime <Date>|<DateTime>] [endtime <Date>|<DateTime>] 
gam update vaulthold|hold <HoldItem> matter <MatterItem> [query <QueryVaultCorpus>]
	[([addaccounts|addgroups|addusers <EmailItemList>] [removeaccounts|removegroups|removeusers <EmailItemList>]) | (orgunit|ou <OrgUnit>)]
	[starttime <Date>|<DateTime>] [endtime <Date>|<DateTime>] 
gam delete vaulthold|hold <HoldItem> matter <MatterItem>
gam info vaulthold|hold <HoldItem> matter <MatterItem> [shownames]
gam show vaultholds|holds [matter|matters <MatterItemList>] [shownames]
gam print vaultholds|holds [todrive [<ToDriveAttributes>]] [matter|matters <MatterItemList>] [shownames]

gam create vaultmatter|matter [name <String>] [description <string>]
	[collaborator|collaborators <EmailItemList>]
gam update vaultmatter|matter <MatterItem> [name <String>] [description <string>]
	[addcollaborator|addcollaborators <EmailItemList>] [removecollaborator|removecollaborators <EmailItemList>]
gam update vaultmatter|matter <MatterItem> action close|reopen|delete|undelete
gam close vaultmatter|matter <MatterItem>
gam reopen vaultmatter|matter <MatterItem>
gam delete vaultmatter|matter <MatterItem>
gam undelete vaultmatter|matter <MatterItem>
gam info vaultmatter|matter <MatterItem>
gam show vaultmatters|matters [basic|full]
gam print vaultmatters|matters [todrive [<ToDriveAttributes>]] [basic|full]

# Users

<UserFieldName> ::=
	addresses|address|
	agreedtoterms|agreed2terms|
	changepasswordatnextlogin|changepassword|
	creationtime|
	deletiontime|
	email|emails|otheremail|otheremails|
	externalids|externalid|
	familyname|firstname|fullname|givenname|lastname|name|
	gender|
	id|
	ims|im|
	includeinglobaladdresslist|gal|
	ipwhitelisted|
	isdelegatedadmin|admin|isadmin|
	ismailboxsetup|
	is2svenforced|
	is2svenrolled|
	keyword|keywords|
	language|languages|
	lastlogintime|
	locations|location|
	noneditablealiases|aliases|nicknames|
	notes|note|
	organizations|organization|
	orgunitpath|org|ou|
	phones|phone|
	posixaccounts|posix|
	primaryemail|username|
	relations|relation|
	sshpublickeys|ssh|sshkeys|
	suspended|
	thumbnailphotourl|photo|photourl|
	websites|website
<UserFieldNameList> ::= "<UserFieldName>(,<UserFieldName>)*"

<UserOrderByFieldName> ::=
	familyname|lastname|givenname|firstname|email

<UserAttributes> ::=
	(address clear|(type work|home|other|(custom <String>) [unstructured|formatted <String>] [pobox <String>] [extendedaddress <String>] [streetaddress <String>]
		[locality <String>] [region <String>] [postalcode <String>] [country <String>] [countrycode <String>] notprimary|primary))|
	(admin <Boolean>)|
	(agreed2terms|agreedtoterms <Boolean>)|
	(changepassword|changepasswordatnextlogin <Boolean>)|
	(crypt|sha|sha1|sha-1|md5|nohash)|
	(customerid <String>)|
	(email|primaryemail|username <EmailAddress>)|
	(otheremail clear|(work|home|other|<String> <String>))|
	(externalid clear|(account|customer|login_id|network|organization|<String> <String>))|
	(firstname|givenname <String>)|
	(gal|includeinglobaladdresslist <Boolean>)|
	(gender clear|(female|male|unknown|(other <String>) [addressmeas <String>]))|
	(im clear|(type work|home|other|(custom <String>) protocol aim|gtalk|icq|jabber|msn|net_meeting|qq|skype|yahoo|(custom_protocol <String>) <String> [notprimary|primary]))|
	(ipwhitelisted <Boolean>)|
	(keyword clear|(occupation|outlook|(custom <string>) <String>))|
	(language clear|<LanguageList>)|
	(lastname|familyname <String>)|
	(location clear|(type default|desk|<String> area <String> [building|buildingid <String>] [floor|floorname <String>] [section|floorsection <String>] [desk|deskcode <String>] endlocation))|
	(note clear|([text_plain|text_html] <String>|(file <FileName> [charset <Charset>])))|
	(organization clear|([type domain_only|school|unknown|work] [customtype <String>] [name <String>] [title <String>] [department <String>] [symbol <String>]
		[costcenter <String>]  [location <String>] [description <String>] [domain <String>] notprimary|primary))|
	(org|ou|orgunitpath <OrgUnitPath>)
	(password random|<Password>)|
	(phone clear|([type work|home|other|work_fax|home_fax|other_fax|main|company_main|assistant|mobile|work_mobile|pager|work_pager|car|radio|callback|isdn|telex|tty_tdd|grand_central|(custom <String>)]
		[value <String>] notprimary|primary))|
	(posix clear|(username <String> uid <Integer> gid <Integer> [system|systemid <String>] [home|homedirectory <String>] [shell <String>] [gecos <String>] [primary <Boolean>] endposix))|
	(relation clear|(spouse|child|mother|father|parent|brother|sister|friend|relative|domestic_partner|manager|dotted-line_manager|assistant|admin_assistant|exec_assistant|referred_by|partner|<String> <String>))|
	(sshkeys clear|(key <String> [expires <Integer>] endssh))|
	(suspended <Boolean>)|
	(website clear|(home_page|blog|profile|work|home|other|ftp|reservations|app_install_page|<String> <URL> [notprimary|primary]))|
	(<SchemaName>.<FieldName> [multivalued|multivalue|value|multinonempty [type work|home|other|(custom <String>)]] <String>)

gam create user <EmailAddress> <UserAttributes>* [notify <EmailAddress>] [subject <String>] [message <String>|(file <FileName> [charset <CharSet>])]
gam update user <UserItem> <UserAttributes>* [clearschema <SchemaName>] [clearschema <SchemaName>.<FieldName>]
	[createifnotfound] [notify <EmailAddress>] [subject <String>] [message <String>|(file <FileName> [charset <CharSet>])]
gam delete user <UserItem>
gam undelete user <UserItem> [org|ou <OrgUnitPath>]
gam suspend user <UserItem>
gam unsuspend user <UserItem>
gam info user [<UserItem>] [quick] [noaliases] [nogroups] [nolicenses|nolicences] [noschemas] [schemas|custom <SchemaNameList>]
	[userview] <UserFieldName>* [fields <UserFieldNameList>] [(products|product <ProductIDList>)|(skus|sku <SKUIDList>)] [formatjson]

gam update users <UserTypeEntity> <UserAttributes>* [clearschema <SchemaName>] [clearschema <SchemaName>.<FieldName>] [createifnotfound]
gam delete users <UserTypeEntity>
gam undelete users <UserEntity> [org|ou <OrgUnitPath>]
gam suspend users <UserTypeEntity>
gam unsuspend users <UserTypeEntity>
gam info users <UserTypeEntity> [quick] [noaliases] [nogroups] [nolicenses|nolicences] [noschemas] [schemas|custom <SchemaNameList>]
	[userview] <UserFieldName>* [fields <UserFieldNameList>] [(products|product <ProductIDList>)|(skus|sku <SKUIDList>)] [formatjson]

gam <UserTypeEntity> update users <UserAttributes>* [clearschema <SchemaName>] [clearschema <SchemaName>.<FieldName>] [createifnotfound]
gam <UserTypeEntity> delete users
gam <UserEntity> undelete users [org|ou <OrgUnitPath>]
gam <UserTypeEntity> suspend users
gam <UserTypeEntity> unsuspend users
gam <UserTypeEntity> info users [quick] [noaliases] [nogroups] [nolicenses|nolicences] [noschemas] [schemas|custom <SchemaNameList>]
	[userview] <UserFieldName>* [fields <UserFieldNameList>] [(products|product <ProductIDList>)|(skus|sku <SKUIDList>)] [formatjson]

Print no header row and primaryEmail for specified users; there is no CSV file redirection with these commands.

gam <UserTypeEntity> print
gam <UserTypeEntity> print users

All of the following commands support CSV file redirection.

Print a header row and primaryEmail for all users.

gam print users

Print a header row and selected fields for specified users; primaryEmail is the always the first column.
If you specify allfields|basic|full, all other column headers are sorted.
If you specify <UserFieldName>* | fields <UserFieldNameList>, the column headers appear in the order specified.

gam [<UserTypeEntity>] print users [todrive [<ToDriveAttributes>]] ([domain <DomainName>] [query <QueryUser>] [deleted_only|only_deleted])|[select <UserTypeEntity>]
	[groups] [license|licenses|licence|licences] [emailpart|emailparts|username] [schemas|custom all|<SchemaNameList>]
	[orderby <UserOrderByFieldName> [ascending|descending]]
	[userview] [allfields|basic|full | (<UserFieldName>* | fields <UserFieldNameList>)] [delimiter <Character>] [sortheaders [<Boolean>]]

# Users - Aliases

gam <UserTypeEntity> delete alias|aliases

# Users - Application Specific Passwords/backup Codes

gam <UserTypeEntity> delete asps|applicationspecificpasswords <AspID>
gam <UserTypeEntity> show asps|applicationspecificpasswords

gam <UserTypeEntity> update backupcodes|verificationcodes
gam <UserTypeEntity> delete backupcodes|verificationcodes
gam <UserTypeEntity> show backupcodes|verificationcodes

# Users - Calendars

<CalendarACLRole> ::=
	editor|freebusy|freebusyreader|owner|reader|writer

<CalendarSelectProperties> ::=
	(minaccessrole <CalendarACLRole>)|showdeleted|showhidden

<CalendarAddEntity> ::=
	<EmailAddressList>|
	(resource <ResourceID>)|
	(resources <ResourceIDList>)|
	((calendars <CalendarList>) | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>)
<CalendarManageEntity> ::=
	allcalendars|
	primary|
	<EmailAddressList>|
	(resource <ResourceID>)|
	(resources <ResourceIDList>)|
	((calendars <CalendarList>) | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>)|
	<CalendarSelectProperties>+
<CalendarPrintShowEntity> ::=
	allcalendars|
	primary|
	<CalendarSelectProperties>+

<CalendarAttributes> ::=
	(backgroundcolor <ColorHex>)|
	(colorindex|colorid <CalendarColorIndex>)|
	(foregroundcolor <ColorHex>)|
	(hidden <Boolean>)|
	(notification clear|(email|sms eventcreation|eventchange|eventcancellation|eventresponse|agenda))|
	(reminder clear|(email|sms|pop <Number>)|(<Number> email|sms|pop))|
	(selected <Boolean>)|
	(summary <String>)

Manage a users list of calendars

gam <UserTypeEntity> add calendars <CalendarAddEntity> <CalendarAttributes>*
gam <UserTypeEntity> update calendars <CalendarManageEntity> <CalendarAttributes>+
gam <UserTypeEntity> delete calendars <CalendarManageEntity>

gam <UserTypeEntity> info calendars <CalendarManageEntity>
gam <UserTypeEntity> show calendars <CalendarPrintShowEntity> [permissions]
gam <UserTypeEntity> print calendars <CalendarPrintShowEntity> [todrive [<ToDriveAttributes>]] [permissions]

gam <UserTypeEntity> show calsettings

<CalendarSettings> ::==
	(summary <String>)|(description <String>)|(location <String>)|(timezone <String>)

Create, modify and remove calendars for a user

gam <UserTypeEntity> create calendar <CalendarSettings>
gam <UserTypeEntity> modify calendars <CalendarManageEntity> <CalendarSettings>
gam <UserTypeEntity> remove calendars <CalendarManageEntity>

<CalendarACLScope> ::= <EmailAddress>|user:<EmailAdress>|group:<EmailAddress>|domain:<DomainName>|domain|default
<CalendarACLScopeList> ::== "<CalendarACLScope>(,<CalendarACLScope>)*"
<CalendarACLScopeEntity>::= <ACLScopeList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

Manage access to any calendar a user owns

gam <UserTypeEntity> add calendaracls <CalendarManageEntity> <CalendarACLRole> <CalendarACLScopeEntity>
gam <UserTypeEntity> update calendaracls <CalendarManageEntity> <CalendarACLRole> <CalendarACLScopeEntity>
gam <UserTypeEntity> delete calendaracls <CalendarManageEntity> <CalendarACLRole>] <CalendarACLScopeEntity>

gam <UserTypeEntity> info calendaracls <CalendarManageEntity> <CalendarACLScopeEntity>
gam <UserTypeEntity> show calendaracls <CalendarManageEntity>
gam <UserTypeEntity> print calendaracls <CalendarManageEntity> [todrive [<ToDriveAttributes>]]

Transfer ownership of a selection of users calendars to another user

gam <UserTypeEntity> transfer calendars <CalendarManageEntity> <UserItem> [keepuser | (retainrole <CalendarACLRole>)]

<EventSelectProperties:> ::=
	(endtime|timemax <Time>)|
	(query <QueryCalendar>)|
	(privateextendedproperty <String>)|
	(sharedextendedproperty <Syting>)|
	showdeletedevents|
	showhiddeninvitations|
	singleevents|
	(starttime|timemin <Time>)|
	(updatedmin <Time>)

<EventMatchProperties:> ::=
	(matchfield attendees <EmailAddressList>)|
	(matchfield creatoremail <RegularExpression>)|
	(matchfield creatorname <RegularExpression>)|
	(matchfield description <RegularExpression>)|
	(matchfield location <RegularExpression>)|
	(matchfield organizeremail <RegularExpression>)|
	(matchfield organizername <RegularExpression>)|
	(matchfield summary <RegularExpression>)

<EventEntity> ::=
	(events <EventIdList> | <FileSelector> | <CSVkmdSelector> | <CSVSubkeySelector> | <CSVDataSelector>)|
	(<EventSelectProperties>+ <EventMatchProperties>*)

<EventAttributes> ::=
	(anyonecanaddself [<Boolean>])|
	(attendee <EmailAddress>)|
	available|
	(colorindex|colorid <EventColorIndex>))|
	(description <String>)|
	(end (allday <Date>)|<Time>)|
	(guestscaninviteothers <Boolean>)|
	guestscantinviteothers|
	(guestscanseeotherguests <Boolean>)|
	guestscantseeotherguests|
	(location <String>)|
	(noreminders|(reminder email|popup|sms <Number>))|
	(optionalattendee <EmailAddress>)|
	(privateproperty <PropertyKey> <PropertyValue>)|
	(recurrence <RRULE, EXRULE, RDATE and EXDATE line>)|
	(reminder <Number> email|popup|sms))|
	(sharedproperty <PropertyKey> <PropertyValue>)|
	(source <String> <URL>)|
	(start (allday <Date>)|<Time>)|
	(status confirmed|tentative|cancelled)|
	(summary <String>)|
	tentative|
	(timezone <TimeZone>)|
	(transparency opaque|transparent)|
	(visibility default|public|private)

<EventAddAttributes> ::=
	<EventAttributes>|
	notifyattendees|(sendnotifications <Boolean>)

<EventImportAttributes> ::=
	<EventAttributes>|
	(organizername <String>)|
	(organizeremail <EmailAddress>)

<EventUpdateAttributes> ::=
	<EventAttributes>|
	notifyattendees|(sendnotifications <Boolean>)|
	(clearprivateproperty <PropertyKey>)|
	(clearsharedproperty <PropertyKey>)

The following attributes are equivalent:
	available = transparency transparent
	guestscantinviteothers = guestscaninviteothers False
	guestscantseeothers = guestscanseeotherguests False
	tentative = status tentative

Add update and delete events in any calendar for which a user has access

gam <UserTypeEntity> add event <CalendarManageEntity> [id <String>] <EventAddAttributes>+
gam <UserTypeEntity> import event <CalendarEntity> icaluid <iCalUID> <EventImportAttributes>+
gam <UserTypeEntity> update events <CalendarManageEntity> <EventEntity> <EventUpdateAttributes>+
gam <UserTypeEntity> delete events <CalendarManageEntity> <EventEntity> [doit] [notifyattendees]
gam <UserTypeEntity> wipe events <CalendarManageEntity>
gam <UserTypeEntity> move events <CalendarManageEntity> <EventEntity> to <CalendarItem> [notifyattendees]
gam <UserTypeEntity> update calattendees <CalendarManageEntity> <EventEntity> [anyorganizer] [csv <FileName>] (replace <EmailAddress> <EmailAddress>)* [doit]

<EventDisplayProperties> ::=
	(alwaysincludeemail)|
	(icaluid <String>)|
	(maxattendees <Integer>)|
	(orderby starttime|updated)|
	(timezone <TimeZone>)

gam <UserTypeEntity> info events <CalendarManageEntity> <EventEntity> [maxinstances <Number>]
gam <UserTypeEntity> show events <CalendarPrintShowEntity> ([allevents] <EventSelectProperties>*) <EventDisplayProperties>*
gam <UserTypeEntity> print events <CalendarPrintShowEntity> ([allevents] <EventSelectProperties>*) [todrive [<ToDriveAttributes>]] <EventDisplayProperties>*

# Users - Drive

<DriveFileAttributes> ::=
	(description <String>)|
	(folderColorRgb <ColorHex>)|
	(indexabletext <String>)|
	(keeprevisionforever|pinned)|
	(lastviewedbyme <Time>)|
	(localfile <FileName>)|
	(mimetype <MimeType>)|
	(ocrlanguage <Language>)|
	(restricted|restrict [<Boolean>])|
	(starred|star [<Boolean>])|
	(trashed|trash [<Boolean>])|
	(viewed|view [<Boolean>])|
	(viewerscancopycontent [<Boolean>])|
	(writerscanshare|writerscantshare [<Boolean>])

<DriveFileAddAttributes> ::=
	<DriveFileAttributes>|
	ignoredefaultvisibility|
	(modifieddate|modifiedtime <Time>)|
	(parentid <DriveFolderID>)|
	(parentname <DriveFolderName>)|
	(anyownerparentname <DriveFolderName>)|
	(teamdriveparent <TeamDriveName>)|
	(teamdriveparentid <TeamDriveID>|<DriveFolderID>)|
	(teamdriveparentname <DriveFolderName>)|
	usecontentasindexabletext

<DriveFileUpdateAttributes> ::=
	<DriveFileAttributes>|
	(addparents <DriveFolderIDList>)|
	(removeparents <DriveFolderIDList>)|
	(parentid <DriveFolderID>)|
	(parentname <DriveFolderName>)|
	(anyownerparentname <DriveFolderName>)|
	usecontentasindexabletext

<DriveFileCopyAttributes> ::=
	<DriveFileAttributes>|
	ignoredefaultvisibility|
	(parentid <DriveFolderID>)|
	(parentname <DriveFolderName>)|
	(anyownerparentname <DriveFolderName>)|
	(teamdriveparent <TeamDriveName>)|
	(teamdriveparentid <TeamDriveID>|<DriveFolderID>)|
	(teamdriveparentname <DriveFolderName>)

<DriveFileOrderByFieldName> ::=
	createddate|createdtime|
	folder|
	lastviewedbyme|lastviewedbymedate|lastviewedbymetime|lastviewedbyuser|
	modifiedbyme|modifiedbymedate|modifiedbymetime|modifiedbyuser|
	modifieddate|modifiedtime|
	name|
	quotabytesused|quotaused|
	recency|
	sharedwithmedate|sharedwithmetime|
	starred|
	title|
	viewedbymedate|viewedbymetime

<DriveFileIDEntity> ::= (<DriveFileItem>) | (id <DriveFileItem>) | (id:<DriveFileItem>) | (ids <DriveFileList>) | (ids:<DriveFileList>)
<DriveFileNameEntity> ::= (drivefilename <DriveFileName>) | (drivefilename:<DriveFileName>) | (anydrivefilename <DriveFileName>) | (anydrivefilename:<DriveFileName>)
<DriveFileQueryEntity> ::= (query <QueryDriveFile>) | (query:<QueryDriveFile>)
<DriveFileEntity> ::= <DriveFileIDEntity> | <DriveFileNameEntity> | <DriveFileQueryEntity> | <DriveFileQueryShortcut> |  root | <FileSelector> | <CSVkmdSelector> | <CSVSubkeySelector>) | <CSVDataSelector>)

gam <UserTypeEntity> add drivefile [drivefilename <DriveFileName>] <DriveFileAddAttributes>*
gam <UserTypeEntity> update drivefile <DriveFileEntity> [copy] [newfilename <DriveFileName>] <DriveFileUpdateAttributes>*
gam <UserTypeEntity> copy drivefile <DriveFileEntity> [newfilename <DriveFileName>] [recursive [depth <Number>]] <DriveFileCopyAttributes>*
gam <UserTypeEntity> get drivefile <DriveFileEntity> [format <FileFormatList>] [targetfolder <FilePath>] [revision <DriveFileRevisionID>]
gam <UserTypeEntity> delete drivefile <DriveFileEntity> [purge|untrash|trash]
gam <UserTypeEntity> purge drivefile <DriveFileEntity>
gam <UserTypeEntity> trash drivefile <DriveFileEntity>
gam <UserTypeEntity> untrash drivefile <DriveFileEntity>

<DriveFilePermissionEntity> ::= <DriveFilePermissionList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>
<DriveFilePermissionIDEntity> ::= <DriveFilePermissionIDList> | <FileSelector> | <CSVkmdSelector> | <CSVDataSelector>

<DriveFileACLRole> :: =commenter|editor|organizer|owner|reader|writer
<DriveFilePermission> ::= anyone|anyonewithlink|user:<EmailAddress>|group:<EmailAddress>|domain:<DomainName>;<DriveFileACLRole>
<DriveFilePermissionID> ::= anyone|anyonewithlink|id:<String>
<DriveFilePermissionIDorEmail> ::= <DriveFilePermissionID>|<EmailAddress>
<DriveFilePermissionList> ::= "<DriveFilePermission>(,<DriveFilePermission)*"
<DriveFilePermissionIDList> ::= "<DriveFilePermissionID>(,<DriveFilePermissionID>)*"

gam <UserTypeEntity> add drivefileacl <DriveFileEntity> anyone|(user <UserItem>)|(group <GroupItem>)|(domain <DomainName>)
	(role <DriveFileACLRole>) [withlink|(allowfilediscovery|discoverable [<Boolean>])] [expires|expiration <Time>] [sendemail] [emailmessage <String>] [showtitles]
gam <UserTypeEntity> update drivefileacl <DriveFileEntity> <DriveFilePermissionIDorEmail>
	(role <DriveFileACLRole>) [withlink|(allowfilediscovery|discoverable [<Boolean>])] [expires|expiration <Time>] [removeexpiration [<Boolean>]] [showtitles]
gam <UserTypeEntity> delete drivefileacl <DriveFileEntity> <DriveFilePermissionIDorEmail> [showtitles]
gam <UserTypeEntity> show drivefileacl <DriveFileEntity> [showtitles] (orderby <DriveFileOrderByFieldName> [ascending|descending])*
gam <UserTypeEntity> print drivefileacls <DriveFileEntity> [todrive [<ToDriveAttributes>]] [oneitemperrow] [showtitles] (orderby <DriveFileOrderByFieldName> [ascending|descending])*
gam <UserTypeEntity> add permissions <DriveFileEntity> <DriveFilePermissionEntity> [expires|expiration <Time>] [sendemail] [emailmessage <String>]
gam <UserTypeEntity> delete permissions <DriveFileEntity> <DriveFilePermissionIDEntity>

<RevisionsFieldName> ::=
	filesize|
	id|
	keepforever|
	lastmodifyinguser|
	lastmodifyingusername|
	md5checksum|
	mimetype|
	modifieddate|
	modifiedtime|
	originalfilename|
	pinned|
	published|
	publishedauto|
	publishedoutsidedomain|
	size
<RevisionsFieldNameList> ::= "<RevisionsFieldName>(,<RevisionsFieldName>)*"

gam <UserTypeEntity> delete filerevisions <DriveFileEntity> select <DriveFileRevisionIDEntity> [previewdelete]
	[showtitles] [doit] [max_to_delete <Number>]
gam <UserTypeEntity> show filerevisions <DriveFileEntity> [select <DriveFileRevisionIDEntity>] [previewdelete]
	[showtitles] [<RevisionsFieldName>*|(fields <RevisionsFieldNameList>)] (orderby <DriveFileOrderByFieldName> [ascending|descending])*
gam <UserTypeEntity> print filerevisions <DriveFileEntity> [todrive [<ToDriveAttributes>]] [oneitemperrow] [select <DriveFileRevisionIDEntity>] [previewdelete]
	[showtitles] [<RevisionsFieldName>*|(fields <RevisionsFieldNameList>)] (orderby <DriveFileOrderByFieldName> [ascending|descending])*

gam <UserTypeEntity> transfer ownership <DriveFileEntity> <UserItem> [includetrashed]
	(orderby <DriveFileOrderByFieldName> [ascending|descending])*
	[preview] [filepath] [buildtree] [todrive [<ToDriveAttributes>]]
gam <UserTypeEntity> claim ownership <DriveFileEntity> [includetrashed]
	(orderby <DriveFileOrderByFieldName> [ascending|descending])*
	[skipids <DriveFileEntity>] [skipusers <UserTypeEntity>] [subdomains <DomainNameEntity>]
	[restricted [<Boolean>]] [writerscanshare|writerscantshare [<Boolean>]] [keepuser | (retainrole reader|commenter|writer|editor|none)]
	[preview] [filepath] [buildtree] [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> transfer drive <UserItem> [select <DriveFileEntity>] [keepuser | (retainrole reader|commenter|writer|editor|none)]
	[(targetfolderid <DriveFolderID>)|(targetfoldername <DriveFolderName>)] [targetuserfoldername <DriveFolderName>]
	(orderby <DriveFileOrderByFieldName> [ascending|descending])*
	[preview] [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> collect orphans (orderby <DriveFileOrderByFieldName> [ascending|descending])*
	[targetuserfoldername <DriveFileName>] [preview] [todrive [<ToDriveAttributes>]]

<DriveParentsSubfieldName> ::=
	parents.id

<DrivePermissionsSubfieldName> ::=
	permissions.additionalroles|
	permissions.allowfilediscovery|
	permissions.deleted|
	permissions.displayname|
	permissions.domain|
	permissions.emailaddress|
	permissions.expirationdate|
	permissions.expirationtime|
	permissions.id|
	permissions.name|
	permissions.photolink|
	permissions.role|
	permissions.teamdrivepermissiondetails|
	permissions.type|
	permissions.withlink

<DrivePropertiesSubfieldName> ::=
	properties.key|
	properties.value|
	properties.visibility

<DriveLastModifyingUserSubfieldName> ::=
	lastmodifyinguser.displayname|
	lastmodifyinguser.emailaddress|
	lastmodifyinguser.isauthenticateduser|
	lastmodifyinguser.me|
	lastmodifyinguser.name|
	lastmodifyinguser.permissionid|
	lastmodifyinguser.photolink|
	lastmodifyinguser.picture

<DriveSharingUserSubfieldName> ::=
	sharinguser.displayname|
	sharinguser.emailaddress|
	sharinguser.isauthenticateduser|
	sharinguser.me|
	sharinguser.name|
	sharinguser.permissionid|
	sharinguser.photolink|
	sharinguser.picture

<DriveTrashingUserSubfieldName> ::=
	trashinguser.displayname|
	trashinguser.emailaddress|
	trashinguser.isauthenticateduser|
	trashinguser.me|
	trashinguser.name|
	trashinguser.permissionid|
	trashinguser.photolink|
	trashinguser.picture

<DriveFieldName> ::=
	alternatelink|
	appdatacontents|
	cancomment|
	canreadrevisions|
	capabilities|
	copyable|
	createddate|createdtime|
	description|
	editable|
	explicitlytrashed|
	fileextension|
	filesize|
	foldercolorrgb|
	fullfileextension|
	hasaugmentedpermissions|
	headrevisionid|
	iconlink|
	id|
	isappauthorized|
	lastmodifyinguser|
	<DriveLastModifyingUserSubfieldName>|
	lastmodifyingusername|
	lastviewedbyme|lastviewedbymedate|lastviewedbymetime|lastviewedbyuser|
	md5|md5checksum|md5sum|
	mime|mimetype|
	modifiedbyme|modifiedbymedate|modifiedbymetime|modifiedbyuser|
	modifieddate|modifiedtime|
	name|
	originalfilename|
	ownedbyme|
	ownernames|
	owners|
	parents|
	<DriveParentsSubfieldName>|
	permissions|
	<DrivePermissionsSubfieldName>|
	properties|
	<DrivePropertiesSubfieldName>|
	quotabytesused|quotaused|
	restricted|
	shareable|
	shared|
	sharedwithmedate|sharedwithmetime|
	sharinguser|
	<DriveSharingUserSubfieldName>|
	size|
	spaces|
	starred|
	teamdriveid|
	thumbnaillink|
	title|
	trashed|
	trasheddate|trashedtime|
	trashinguser|
	<DriveTrashingUserSubfieldName>|
	userpermission|
	version|
	viewed|
	viewedbymedate|viewedbymetime|
	viewerscancopycontent|
	webcontentlink|
	webviewlink|
	writerscanshare
<DriveFieldNameList> ::= "<DriveFieldName>(,<DriveFieldName>)*"

gam <UserTypeEntity> show fileinfo <DriveFileEntity> [filepath] [allfields|<DriveFieldName>*|(fields <DriveFieldNameList>)] (orderby <DriveFileOrderByFieldName> [ascending|descending])*
gam <UserTypeEntity> show filepath <DriveFileEntity> (orderby <DriveFileOrderByFieldName> [ascending|descending])*
gam <UserTypeEntity> print filepath <DriveFileEntity> [todrive [<ToDriveAttributes>]] [oneitemperrow] (orderby <DriveFileOrderByFieldName> [ascending|descending])*

gam <UserTypeEntity> print|show filelist [todrive [<ToDriveAttributes>]] [anyowner|(showownedby any|me|others)]
	[query <QueryDriveFile>] [fullquery <QueryDriveFile>] [<DriveFileQueryShortcut>]
	[select <DriveFileEntityListTree>] [selectsubquery <QueryDriveFile>] [mimetype [not] <MimeTypeList>] [depth <Number>] [showparent]
	[filepath] [buildtree] [allfields|<DriveFieldName>*|(fields <DriveFieldNameList>)] (orderby <DriveFileOrderByFieldName> [ascending|descending])* [delimiter <Character>]
gam <UserTypeEntity> show filetree [anyowner|(showownedby any|me|others)]
	[select <DriveFileEntityListTree>] [selectsubquery <QueryDriveFile>] [showmimetype [not] <MimeTypeList>] [depth <Number>]
	(orderby <DriveFileOrderByFieldName> [ascending|descending])*

gam <UserTypeEntity> print|show driveactivity [todrive [<ToDriveAttributes>]] [fileid <DriveFileID>] [folderid <DriveFolderID>]

<DriveSettingsFieldName> ::=
	appinstalled|
	exportformats|
	foldercolorpalette|
	importformats|
	largestchangeid|
	limit|
	maximportsizes|
	maxuploadsize|
	name|
	permissionid|
	rootfolderid|
	teamdrivethemes|
	usage|
	usageindrive|
	usageindrivetrash
<DriveSettingsFieldNameList> ::= "<DriveSettingsFieldName>(,<DriveSettingsFieldName>)*"

gam <UserTypeEntity> print drivesettings [todrive [<ToDriveAttributes>]] [allfields|<DriveSettingsFieldName>*|(fields <DriveSettingsFieldNameList>)] [delimiter <Character>]
gam <UserTypeEntity> show drivesettings [allfields|<DriveSettingsFieldName>*|(fields <DriveSettingsFieldNameList>)] [delimiter <Character>]

gam <UserTypeEntity> delete emptydrivefolders [<TeamDriveEntity>]
gam <UserTypeEntity> empty drivetrash [<TeamDriveEntity>]

# Users - Deprovision

gam <UserTypeEntity> deprovision|deprov

# Users - Gmail - Delegates

gam <UserTypeEntity> delegate to <UserEntity>
gam <UserTypeEntity> add delegate|delegates <UserEntity>
gam <UserTypeEntity> delete delegate|delegates <UserEntity>
gam <UserTypeEntity> show delegates|delegate
gam <UserTypeEntity> print delegates [todrive [<ToDriveAttributes>]]

# Users - Gmail - Filters

<FilterCriteria> ::=
	excludechats|
	(from <EmailAddress>)|
	(haswords|query <List>)|
	(musthaveattachment|hasattachment)|
	(nowords|negatedquery <List>)|
	(size larger|smaller <ByteCount>)|
	(subject <String>)|
	(to <EmailAddress>)

<FilterAction> ::=
	archive|
	(forward <EmailAddress>)|
	(important|notimportant)|(star)|
	(label <LabelID>)|
	markread|
	neverspam|
	trash

gam <UserTypeEntity> [add] filter <FilterCriteria>+ <FilterAction>+
gam <UserTypeEntity> delete filters <FilterIDEntity>

gam <UserTypeEntity> info filters <FilterIDEntity>
gam <UserTypeEntity> show filters [labelidsonly]
gam <UserTypeEntity> print filters [labelidsonly] [todrive [<ToDriveAttributes>]]

# Users - Gmail - Forwarding

gam <UserTypeEntity> add forwardingaddress|forwardingaddresses <EmailAddressEntity>
gam <UserTypeEntity> delete forwardingaddress|forwardingaddresses <EmailAddressEntity>

gam <UserTypeEntity> show forwardingaddress|forwardingaddresses
gam <UserTypeEntity> info forwardingaddress|forwardingaddresses <EmailAddressEntity>
gam <UserTypeEntity> print forwardingaddress|forwardingaddresses [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> forward <FalseValues>
gam <UserTypeEntity> forward <TrueValues> keep|leaveininbox|archive|delete|trash|markread <EmailAddress>

gam <UserTypeEntity> show forward
gam <UserTypeEntity> print forward [todrive [<ToDriveAttributes>]]

# Users - Gmail - Labels/Messages

gam <UserTypeEntity> [add] label|labels <String> [messagelistvisibility hide|show] [labellistvisibility hide|show|showifunread] [buildpath [<Boolean>]]
gam <UserTypeEntity> update labelsettings <LabelName> [name <String>] [messagelistvisibility hide|show] [labellistvisibility hide|show|showifunread]
gam <UserTypeEntity> update label|labels [search <RegularExpression>] [replace <String>] [merge]
gam <UserTypeEntity> delete label|labels <LabelName>|regex:<RegularExpression>|--ALL_LABELS--

gam <UserTypeEntity> show labels|label [onlyuser [<Boolean>]] [showcounts [<Boolean>]] [nested [<Boolean>]] [display allfields|basename|fullname]
gam <UserTypeEntity> print labels|label [onlyuser [<Boolean>]] [showcounts [<Boolean>]] [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> import message (<SMTPDateHeader> <Time>)* (<SMTPHeader> <String>)* (header <String> <String>)* (addlabel <LabelName>)*
	(textmessage <String>)|(textfile <FileName> [charset <CharSet>]) (htmlmessage <String>)|(htmlfile <FileName> [charset <CharSet>])
	(replace <Tag> <String>)* (attach <FileName>)*
	[deleted [<Boolean>]] [nevermarkspam [<Boolean>]] [processforcalendar [<Boolean>]]
gam <UserTypeEntity> insert message (<SMTPDateHeader> <Time>)* (<SMTPHeader> <String>)* (header <String> <String>)* (addlabel <LabelName>)*
	(textmessage <String>)|(textfile <FileName> [charset <CharSet>]) (htmlmessage <String>)|(htmlfile <FileName> [charset <CharSet>])
	(replace <Tag> <String>)* (attach <FileName>)*
	[deleted [<Boolean>]]

gam <UserTypeEntity> archive messages <GroupItem> (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_archive|max_to_process <Number>])|(ids <MessageIDEntity>)
gam <UserTypeEntity> delete messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_delete|max_to_process <Number>])|(ids <MessageIDEntity>)
gam <UserTypeEntity> modify messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_modify|max_to_process <Number>])|(ids <MessageIDEntity>)
	(addlabel <LabelName>)* (removelabel <LabelName>)*
gam <UserTypeEntity> spam messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_spam|max_to_process <Number>])|(ids <MessageIDEntity>)
gam <UserTypeEntity> trash messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_trash|max_to_process <Number>])|(ids <MessageIDEntity>)
gam <UserTypeEntity> untrash messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])+ [quick|notquick] [doit] [max_to_untrash|max_to_process <Number>])|(ids <MessageIDEntity>)

gam <UserTypeEntity> show messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])* [quick|notquick] [max_to_show|max_to_process <Number>] [includespamtrash])|(ids <MessageIDEntity>)
	[headers <SMTPHeaderList>] [showlabels] [showbody] [showsize] [showsnippet] [showattachments [attachmentnamepattern <RegularExpression>]]
gam <UserTypeEntity> print messages|threads (((query <QueryGmail>) (matchlabel <LabelName>) [or|and])* [quick|notquick] [max_to_print|max_to_process <Number>] [includespamtrash])|(ids <MessageIDEntity>)
	[headers <SMTPHeaderList>] [showlabels] [showbody] [showsize] [showsnippet] [convertcrnl] [delimiter <Character>] [todrive [<ToDriveAttributes>]]

# Users - Gmail - Profile

gam <UserTypeEntity> show gmailprofile
gam <UserTypeEntity> print gmailprofile [todrive [<ToDriveAttributes>]]

# Users - Gmail - Send As/Signature/Vacation

gam <UserTypeEntity> [add] sendas <EmailAddress> <String> [signature|sig <String>|(file <FileName> [charset <CharSet>]) (replace <Tag> <String>)*]
	[html [<Boolean>]] [replyto <EmailAddress>] [default] [treatasalias <Boolean>]
gam <UserTypeEntity> update sendas <EmailAddress> [name <String>] [signature|sig <String>|(file <FileName> [charset <CharSet>]) (replace <Tag> <String>)*]
	[html [<Boolean>]] [replyto <EmailAddress>] [default] [treatasalias <Boolean>]
gam <UserTypeEntity> delete sendas <EmailAddressEntity>
gam <UserTypeEntity> info sendas <EmailAddressEntity> [format]
gam <UserTypeEntity> show sendas [format]
gam <UserTypeEntity> print sendas [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> add smime file <FileName> [password <Password>] [sendas|sendasemail <EmailAddress>] [default]
gam <UserTypeEntity> update smime [id <S/MIMEID>] [sendas|sendasemail <EmailAddress>] [default]
gam <UserTypeEntity> delete smime [id <S/MIMEID>] [sendas|sendasemail <EmailAddress>]
gam <UserTypeEntity> show smimes [primaryonly]
gam <UserTypeEntity> print smimes [todrive [<ToDriveAttributes>]] [primaryonly]

gam <UserTypeEntity> signature|sig <String>|(file <FileName> [charset <Charset>]) (replace <Tag> <String>)*
	[html [<Boolean>]] [name <String>] [replyto <EmailAddress>] [default] [primary] [treatasalias <Boolean>]
gam <UserTypeEntity> show signature|sig [format] [primary]
gam <UserTypeEntity> print signature [todrive [<ToDriveAttributes>]]

gam <UserTypeEntity> vacation <FalseValues>
gam <UserTypeEntity> vacation <TrueValues> subject <String> (message <String>)|(file <FileName> [charset <CharSet>]) (replace <Tag> <String>)*
	[html [<Boolean>]] [contactsonly [<Boolean>]] [domainonly [<Boolean>]] [startdate <Date>|Started] [enddate <Date>|NotSpecified]
gam <UserTypeEntity> show vacation [format]
gam <UserTypeEntity> print vacation [todrive [<ToDriveAttributes>]]	

# Users - Gmail - Settings

gam <UserTypeEntity> imap|imap4 <Boolean> [noautoexpunge] [expungebehavior archive|deleteforever|trash] [maxfoldersize 0|1000|2000|5000|10000]
gam <UserTypeEntity> show imap|imap4

gam <UserTypeEntity> pop|pop3 <Boolean> [for allmail|newmail|mailfromnowon|fromnowown] [action keep|leaveininbox|archive|delete|trash|markread]
gam <UserTypeEntity> show pop|pop3

gam <UserTypeEntity> arrows <Boolean>
gam <UserTypeEntity> language <Language>
gam <UserTypeEntity> pagesize 25|50|100
gam <UserTypeEntity> shortcuts <Boolean>
gam <UserTypeEntity> snippets <Boolean>
gam <UserTypeEntity> utf|utf8|utf-8|unicode <Boolean>
gam <UserTypeEntity> webclips <Boolean>

# Users - Google+ - Profile

gam <UserTypeEntity> show gplusprofile
gam <UserTypeEntity> print gplusprofile [todrive [<ToDriveAttributes>]]

# Users - Groups

gam <UserTypeEntity> add groups [owner|manager|member] <GroupEntity>
gam <UserTypeEntity> delete groups [<GroupEntity>]

# Users - Licenses

gam <UserTypeEntity> add license <SKUID> [product|productid <ProductID>]
gam <UserTypeEntity> update license <SKUID> [product|productid <ProductID>] [from] <SKUID>
gam <UserTypeEntity> delete license <SKUID> [product|productid <ProductID>]

# Users - Photo

gam <UserTypeEntity> update photo <FileNamePattern>
gam <UserTypeEntity> delete photo
gam <UserTypeEntity> get photo [drivedir|(targetfolder <FilePath>)] [noshow]

# Users - Profile

gam <UserTypeEntity> profile share|shared|unshare|unshared

gam <UserTypeEntity> show profile

# Users - Team Drives

gam <UserTypeEntity> create teamdrive <Name> [themeid <String>]
gam <UserTypeEntity> update teamdrive <TeamDriveEntity> [name <Name>] [themeid <String>]
gam <UserTypeEntity> delete teamdrive <TeamDriveEntity>
gam <UserTypeEntity> info teamdrive <TeamDriveEntity>
gam <UserTypeEntity> print teamdrives [todrive [<ToDriveAttributes>]]
gam <UserTypeEntity> show teamdrives

# Users - Spreadsheets

See: https://developers.google.com/sheets/api/reference/rest/
The following right-hand side characters are literal: {}[],'":
The following right-hand side characters are part of the meta-syntax: <>()*|
<SpreadsheetRange> ::= <String>
<SpreadsheetValue> ::= "<String>"|<Number>|true|false
<SpreadsheetValueList> ::= [<SpreadsheetValue>(,<SpreadsheetValue>)*]
<SpreadsheetJSONRangeValues> ::= {"range": <SpreadsheetRange>, "values": [<SpreadsheetValueList>(,<SpreadsheetValueList>)*], "majorDimension": "ROWS|COLUMNS"}
<SpreadsheetJSONRangeValuesList> ::= '[<SpreadsheetJSONRangeValues>(,<SpreadsheetJSONRangeValues>)*]'
<SpreadsheetJSONCreateRequest> ::= '{"properties": {<SpreadsheetProperties>}, "sheets": [{<Sheet>}(,{<Sheet>})*], "namedRanges": [{<NamedRange>}(,{<NamedRange>})*], "developerMetadata": [{<DeveloperMetadata>}(,{DeveloperMetadata>})]}'
<SpreadsheetJSONUpdateRequest> ::= '{"requests": [{<Request>}(,{<Request>})], "includeSpreadsheetInResponse": true|false, "responseRanges": ["<SpreadsheetRange>"(,"<SpreadsheetRange>")], "responseIncludeGridData": true|false}

See: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/create
See: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/batchUpdate

gam <UserTypeEntity> create sheet json <SpreadsheetJSONCreateRequest> [formatjson]
	[parentid <DriveFolderID>] | [parentname <DriveFolderName>] | [anyownerparentname <DriveFolderName>]
	[teamdriveparentid <DriveFolderID>] [teamdriveparent <TeamDriveName>] [teamdriveparentname <DriveFolderName>]
gam <UserTypeEntity> update sheet <DriveFileEntity> json <SpreadsheetJSONUpdateRequest> [formatjson]
gam <UserTypeEntity> info sheet <DriveFileEntity> (range <SpreadsheetRange>)* [includegriddata [<Boolean>]] [formatjson]

See: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values#ValueRange
See: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/append
See: https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets.values/batchUpdate

gam <UserTypeEntity> append sheetrange <DriveFileEntity> json <SpreadsheetJSONRangeValues>|<SpreadsheetJSONRangeValuesList> [overwrite|insertrows]
	[raw|userentered] [formula|formattedvalue|unformattedvalue] [serialnumber|formattedstring]
	[includevaluesinresponse [<Boolean>]] [formatjson]
gam <UserTypeEntity> update sheetrange <DriveFileEntity> (json <SpreadsheetJSONRangeValues>|<SpreadsheetJSONRangeValuesList>)+
	[raw|userentered] [formula|formattedvalue|unformattedvalue] [serialnumber|formattedstring]
	[includevaluesinresponse [<Boolean>]] [formatjson]

gam <UserTypeEntity> clear sheetrange <DriveFileEntity> (range <SpreadsheetRange>)+
	[formatjson]

gam <UserTypeEntity> print sheetrange <DriveFileEntity> (range <SpreadsheetRange>)+  [todrive [<ToDriveAttributes>]]
	[rows|columns] [formula|formattedvalue|unformattedvalue] [serialnumber|formattedstring]
        [formatjson] [quotechar <Character>]
gam <UserTypeEntity> show sheetrange <DriveFileEntity> (range <SpreadsheetRange>)+
	[rows|columns] [formula|formattedvalue|unformattedvalue] [serialnumber|formattedstring]
        [formatjson]

# Users - Tokens

gam <UserTypeEntity> delete tokens clientid <ClientID>

gam <UserTypeEntity> show tokens [clientid <ClientID>]
gam <UserTypeEntity> print tokens [todrive [<ToDriveAttributes>]] [clientid <ClientID>] [delimiter <Character>]
gam print tokens|token [todrive [<ToDriveAttributes>]] [clientid <ClientID>] [delimiter <Character>] [<UserTypeEntity>]

# Verifications

gam create verify|verification <DomainName>
gam update verify|verification <DomainName> cname|txt|text|site|file
gam info verify|verification
